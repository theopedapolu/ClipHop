{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Message = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  ADD_GROUPS: 'Add Groups',\n  MERGE_GROUPS: 'Merge Groups',\n  UPDATE_CLIPBOARD: 'Update Clipboard',\n  GET_CLIPBOARD: 'Get Clipboard',\n  PING: 'Ping',\n  CLOSE_DEVICE: 'Close Device'\n});\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups, width) {\n  let radius = width >= 768 ? 13 : Number((13 / 35 * width / 16).toFixed(2));\n  let originShift = width >= 768 ? 13.5 : Number((11.5 / 35 * width / 16).toFixed(2));\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push([originShift.toString(), originShift.toString()]);\n  } else if (numGroups >= 1) {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + originShift).toString(), (originShift - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  return positions;\n}\nconst PING_INTERVAL = 10000;\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hooks & State\n  const [thisDevice, setThisDevice] = useState({\n    name: \"Caraxes\",\n    type: \"\",\n    id: 1,\n    syncButtonColor: 'green'\n  });\n  const windowSize = useSize();\n  const connection = useRef({\n    ws: null,\n    clipboard: \"\",\n    id: 1\n  });\n  useEffect(() => {\n    connection.current.id = thisDevice.id;\n  }, [thisDevice]);\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');\n    connection.current.ws = ws;\n    ws.onopen = () => {\n      sendMessage(Message.CONNECTION, {\n        text: \"Device connected successfully\"\n      });\n    };\n    ws.onmessage = handleMessage;\n    ws.onclose = onClose;\n    setInterval(sendPing, PING_INTERVAL);\n  }, []);\n  function sendPing() {\n    if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n      connection.current.ws.sendMessage(Message.PING, {\n        text: 'heartbeat'\n      });\n    } else {\n      console.log('Websocket is not open. Cannot send ping');\n    }\n  }\n\n  // const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n  const [deviceGroups, setDeviceGroups] = useState([]);\n\n  // State Change Helper methods\n\n  // Adds new device groups based on the provided device list\n  const addGroups = deviceList => {\n    let newDeviceGroups = [];\n    let groupsMap = new Map();\n    let maxId = 0;\n    deviceList.forEach(device => {\n      if (!groupsMap.has(device.groupId)) {\n        groupsMap.set(device.groupId, []);\n      }\n      groupsMap.get(device.groupId).push({\n        name: device.name,\n        type: device.type\n      });\n      maxId = Math.max(maxId, device.groupId);\n    });\n    for (let i = 1; i <= maxId; ++i) {\n      if (groupsMap.has(i)) {\n        let groupDeviceList = groupsMap.get(i);\n        newDeviceGroups.push({\n          id: i,\n          color: colors[i - 1],\n          devices: groupDeviceList,\n          bubble: groupDeviceList.length > 1\n        });\n      }\n    }\n    setDeviceGroups(newDeviceGroups);\n  };\n\n  // Adds a new device to the device groups\n  const addDevice = (newId, name, type) => {\n    setDeviceGroups(deviceGroups => {\n      let newDeviceGroups = [...deviceGroups, {\n        id: newId,\n        color: colors[newId - 1],\n        devices: [{\n          name: name,\n          type: type\n        }],\n        bubble: false\n      }].sort((a, b) => a.id - b.id);\n      return newDeviceGroups;\n    });\n  };\n\n  // Merges two device groups into one\n  const mergeGroups = (id1, id2) => {\n    setDeviceGroups(deviceGroups => {\n      let updatedGroups = [];\n      for (let group of deviceGroups) {\n        if (group.id === id2) {\n          const group1 = deviceGroups.find(g => g.id === id1);\n          const mergedDevices = [...group.devices, ...group1.devices];\n          updatedGroups.push({\n            ...group,\n            devices: mergedDevices,\n            bubble: mergedDevices.length > 1\n          });\n        } else if (group.id !== id1) {\n          // Skip group id1 since it will be merged later\n          updatedGroups.push(group);\n        }\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Removes a device by name from the device groups\n  const removeDevice = name => {\n    setDeviceGroups(deviceGroups => {\n      deviceGroups.reduce((acc, group) => {\n        let newDevices = group.devices.filter(device => device.name !== name);\n        if (newDevices.length > 0) {\n          acc.push({\n            ...group,\n            devices: newDevices\n          });\n        }\n        return acc;\n      }, []);\n    });\n  };\n\n  // Updates Clipboard\n  async function updateClipboard() {\n    console.log('clipboard before', connection.current.clipboard);\n    await navigator.clipboard.writeText(connection.current.clipboard);\n    setThisDevice(d => ({\n      ...d,\n      syncButtonColor: 'green'\n    }));\n  }\n\n  // Updates Group Clipboard\n  async function updateGroupClipboard() {\n    try {\n      const data = await navigator.clipboard.readText();\n      console.log(connection.current.clipboard, data);\n      if (connection.current.clipboard !== data) {\n        connection.current.clipboard = data;\n        const message = {\n          groupId: connection.current.id,\n          clipboard: connection.current.clipboard\n        };\n        await sendMessage(Message.UPDATE_CLIPBOARD, message);\n        console.log(\"Updated clipboard message sent\", message);\n      }\n    } catch (err) {\n      console.error(\"Could not read clipboard\");\n    }\n  }\n\n  // Handles WebSocket connection closure and removes the device\n  function onClose() {\n    // removeDevice(connection.name);\n    // let message = {name:connection.name};\n    // sendMessage(Message.CLOSE_DEVICE, message);\n  }\n\n  // Websocket handlers\n  async function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n      console.log('Sent Message', data);\n      connection.current.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not open. Cannot send message.');\n    }\n  }\n\n  // Handles incoming WebSocket messages and updates state accordingly\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    console.log(type, message);\n    switch (type) {\n      case Message.ADD_GROUPS:\n        addGroups(message.devices);\n        setThisDevice({\n          name: message.name,\n          type: message.type,\n          id: message.id,\n          syncButtonColor: 'green'\n        });\n        break;\n      case Message.ADD_DEVICE:\n        addDevice(message.groupId, message.name, message.type);\n        break;\n      case Message.MERGE_GROUPS:\n        if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n          connection.current.clipboard = message.newClipboard;\n          setThisDevice(d => ({\n            ...d,\n            id: message.newId,\n            syncButtonColor: 'red'\n          }));\n        }\n        mergeGroups(message.oldId, message.newId);\n        break;\n      case Message.UPDATE_CLIPBOARD:\n        if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n          connection.current.clipboard = message.newClipboard;\n          setThisDevice(d => ({\n            ...d,\n            syncButtonColor: 'red'\n          }));\n        }\n        break;\n      case Message.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n\n  // Drag & Drop event handlers\n  // Handles drag over events during drag-and-drop operations\n  function handleDragOver(event) {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n\n  // Handles the end of a drag event and merges groups if necessary\n  function handleDragEnd(event) {\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        oldId: event.active.id,\n        newId: event.over.id\n      };\n      sendMessage(Message.MERGE_GROUPS, message);\n    }\n  }\n\n  // Monitors drag-and-drop events\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n\n  // Generates positions for the device groups based on their count\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  const positions = useMemo(() => {\n    return deviceGroups ? generatePositions(deviceGroups.length, windowSize[1]) : [];\n  }, [deviceGroups, windowSize]);\n\n  // Rendered JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10\",\n    children: [windowSize[1] < 768 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Info, {\n        outerDivClasses: \"mx-auto order-1 scale-75\",\n        name: thisDevice.name,\n        color: colors[thisDevice.id - 1],\n        type: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-3 flex flex-row place-content-evenly ml-5\",\n        style: {\n          marginTop: `${windowSize[1] + 10}px`\n        },\n        children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n          outerDivClasses: \"mx-auto scale-75\",\n          color: thisDevice.syncButtonColor,\n          onClick: updateClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n          outerDivClasses: \"mx-auto scale-75\",\n          onClick: updateGroupClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Info, {\n        outerDivClasses: \"order-1 scale-75 md:scale-100\",\n        name: thisDevice.name + thisDevice.id,\n        color: colors[thisDevice.id - 1],\n        type: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0\",\n        children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n          outerDivClasses: \"md:my-12\",\n          color: thisDevice.syncButtonColor,\n          onClick: updateClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n          onClick: updateGroupClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",\n      children: [/*#__PURE__*/_jsxDEV(Clock, {\n        spin: deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1 : true,\n        width: windowSize[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 17\n        }, this), deviceGroups && deviceGroups.map((group, idx) => {\n          return /*#__PURE__*/_jsxDEV(DndIcon, {\n            iconId: group.id,\n            top: positions[idx][0],\n            left: positions[idx][1],\n            bubble: group.bubble,\n            children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n              devices: group.devices,\n              color: group.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 21\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 21\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n}\n_s2(Crown, \"yol8M6ay/xzQQO23G8wrt6dt474=\", false, function () {\n  return [useSize];\n});\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","UpdateButton","Info","useSize","jsxDEV","_jsxDEV","Fragment","_Fragment","Message","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","PING","CLOSE_DEVICE","colors","generatePositions","numGroups","width","radius","Number","toFixed","originShift","positions","push","toString","theta","Math","PI","i","round","cos","sin","PING_INTERVAL","Crown","_s2","_s","$RefreshSig$","thisDevice","setThisDevice","name","type","id","syncButtonColor","windowSize","connection","ws","clipboard","current","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","onclose","onClose","setInterval","sendPing","readyState","OPEN","console","log","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","color","devices","bubble","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","reduce","acc","newDevices","filter","updateClipboard","navigator","writeText","d","updateGroupClipboard","data","readText","message","err","error","send","JSON","stringify","warn","event","parse","oldId","newClipboard","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","className","children","outerDivClasses","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","spin","idx","iconId","top","left","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    PING: 'Ping',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    let radius = width >= 768 ? 13 : Number(((13/35)*width/16).toFixed(2))\n    let originShift = width >= 768 ? 13.5 : Number(((11.5/35)*width/16).toFixed(2))\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\nconst PING_INTERVAL = 10000\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const [thisDevice,setThisDevice] = useState({\n        name:\"Caraxes\",\n        type:\"\",\n        id:1,\n        syncButtonColor:'green'\n    });\n\n    const windowSize = useSize();\n\n    const connection = useRef({ws:null,clipboard:\"\",id:1});\n\n    useEffect(() => {\n        connection.current.id = thisDevice.id;\n    },[thisDevice])\n\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:8080');\n        connection.current.ws = ws\n        ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        ws.onclose = onClose;\n        setInterval(sendPing,PING_INTERVAL)\n    },[])\n\n    function sendPing() {\n        if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n            connection.current.ws.sendMessage(Message.PING,{text:'heartbeat'})\n        } else {\n            console.log('Websocket is not open. Cannot send ping')\n        }\n        \n    }\n\n    // const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n    const [deviceGroups, setDeviceGroups] = useState([])\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the device groups\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            deviceGroups.reduce((acc,group) => {\n                let newDevices = group.devices.filter(device => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n                return acc;\n            },[]);\n        });\n    };\n\n    // Updates Clipboard\n    async function updateClipboard() {\n        console.log('clipboard before',connection.current.clipboard)\n        await navigator.clipboard.writeText(connection.current.clipboard)\n        setThisDevice((d) => ({...d,syncButtonColor:'green'}))\n    }\n\n    // Updates Group Clipboard\n   async function updateGroupClipboard() {\n        try {\n            const data = await navigator.clipboard.readText()\n            console.log(connection.current.clipboard,data)\n            if (connection.current.clipboard !== data) {\n                connection.current.clipboard = data\n                const message = {groupId:connection.current.id,clipboard:connection.current.clipboard}\n                await sendMessage(Message.UPDATE_CLIPBOARD,message)\n                console.log(\"Updated clipboard message sent\",message)\n            }\n        } catch(err) {\n            console.error(\"Could not read clipboard\")\n        }\n    }\n    \n    // Handles WebSocket connection closure and removes the device\n    function onClose() {\n        // removeDevice(connection.name);\n        // let message = {name:connection.name};\n        // sendMessage(Message.CLOSE_DEVICE, message);\n    }\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.current.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case Message.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'})\n                break;\n            case Message.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case Message.MERGE_GROUPS:\n                if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,id:message.newId,syncButtonColor:'red'}))\n                }\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case Message.UPDATE_CLIPBOARD:\n                if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,syncButtonColor:'red'}))\n                }\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(Message.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,windowSize[1]) : []\n    }, [deviceGroups,windowSize])\n\n    // Rendered JSX\n    return (\n        <div className='flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10'>\n            {windowSize[1] < 768 ? (\n                <>\n                <Info outerDivClasses='mx-auto order-1 scale-75' name={thisDevice.name} color={colors[thisDevice.id-1]} type='E'/>\n                <div className='order-3 flex flex-row place-content-evenly ml-5' style={{marginTop:`${windowSize[1]+10}px`}}>\n                    <SyncButton outerDivClasses='mx-auto scale-75' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                    <UpdateButton outerDivClasses='mx-auto scale-75' onClick={updateGroupClipboard}/>\n                </div>\n                </>\n\n            ): (\n                <>\n                    <Info outerDivClasses='order-1 scale-75 md:scale-100' name={thisDevice.name+thisDevice.id} color={colors[thisDevice.id-1]} type='E'/>\n                    <div className='order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0'>\n                        <SyncButton outerDivClasses='md:my-12' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                        <UpdateButton onClick={updateGroupClipboard}/>\n                    </div>\n                </>\n            )}\n    \n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1: true} width={windowSize[1]}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}