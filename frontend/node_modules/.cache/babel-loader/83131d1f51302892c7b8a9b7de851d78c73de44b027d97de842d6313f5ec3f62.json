{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  ADD_GROUPS: 'Add Groups',\n  MERGE_GROUPS: 'Merge Groups',\n  UPDATE_CLIPBOARD: 'Update Clipboard',\n  GET_CLIPBOARD: 'Get Clipboard',\n  CLOSE_DEVICE: 'Close Device'\n});\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups) {\n  let radius = 13;\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push(['13.5', '13.5']);\n  } else if (numGroups >= 1) {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + 17.5 - 4).toString(), (17.5 - 4 - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  console.log(positions);\n  return positions;\n}\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hooks & State\n  const connection = useRef(null);\n  connection.name = \"\";\n  connection.type = \"\";\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');\n    ws.onopen = () => {\n      sendMessage(Message.CONNECTION, {\n        text: \"Device connected successfully\"\n      });\n    };\n    ws.onmessage = handleMessage;\n    ws.onclose = onClose;\n    connection.ws = ws;\n  }, []);\n  const [deviceGroups, setDeviceGroups] = useState([]);\n\n  // State Change Helper methods\n\n  // Adds new device groups based on the provided device list\n  const addGroups = deviceList => {\n    let newDeviceGroups = [];\n    let groupsMap = {};\n    let maxId = 0;\n    deviceList.forEach(device => {\n      if (!groupsMap.has(device.groupId)) {\n        groupsMap.set(device.groupId, []);\n      }\n      groupsMap.get(device.groupId).push({\n        name: device.name,\n        type: device.type\n      });\n      maxId = Math.max(maxId, device.groupId);\n    });\n    for (let i = 1; i <= maxId; ++i) {\n      if (groupsMap.has(i)) {\n        let groupDeviceList = groupsMap.get(i);\n        newDeviceGroups.push({\n          id: i,\n          colors: colors[i - 1],\n          devices: groupDeviceList\n        });\n      }\n    }\n    setDeviceGroups(newDeviceGroups);\n  };\n\n  // Adds a new device to the device groups\n  const addDevice = (name, type) => {\n    setDeviceGroups(deviceGroups => {\n      let newId = deviceGroups.findIndex((group, idx) => group.id !== idx + 1);\n      newId = newId === -1 ? deviceGroups.length + 1 : newId + 1;\n      return [...deviceGroups, {\n        id: newId,\n        color: colors[newId - 1],\n        devices: [{\n          name: name,\n          type: type\n        }],\n        bubble: false\n      }].sort((a, b) => a.id - b.id);\n    });\n  };\n\n  // Merges two device groups into one\n  const mergeGroups = (id1, id2) => {\n    setDeviceGroups(deviceGroups => {\n      let updatedGroups = [];\n      for (let group of deviceGroups) {\n        if (group.id === id2) {\n          const group1 = deviceGroups.find(g => g.id === id1);\n          const mergedDevices = [...group.devices, ...group1.devices];\n          updatedGroups.push({\n            ...group,\n            devices: mergedDevices\n          });\n        } else if (group.id !== id1) {\n          // Skip group id1 since it will be merged later\n          updatedGroups.push(group);\n        }\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Removes a device by name from the device groups\n  const removeDevice = name => {\n    setDeviceGroups(deviceGroups => {\n      deviceGroups.reduce((acc, group) => {\n        let newDevices = group.devices.filter(device => device.name !== name);\n        if (newDevices.length > 0) {\n          acc.push({\n            ...group,\n            devices: newDevices\n          });\n        }\n        return acc;\n      }, []);\n    });\n  };\n\n  // Websocket handlers\n  async function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n      connection.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not open. Cannot send message.');\n    }\n  }\n\n  // Handles incoming WebSocket messages and updates state accordingly\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    console.log(type, message);\n    switch (type) {\n      case Message.ADD_GROUPS:\n        let newDeviceList = message.devices;\n        addGroups(newDeviceList);\n        break;\n      case Message.ADD_DEVICE:\n        addDevice(message.name, message.type);\n        break;\n      case Message.MERGE_GROUPS:\n        mergeGroups(message.oldId, message.newId);\n        break;\n      case Message.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n\n  // Handles WebSocket connection closure and removes the device\n  function onClose() {\n    removeDevice(connection.name);\n    let message = {\n      name: connection.name\n    };\n    sendMessage(Message.CLOSE_DEVICE, message);\n  }\n\n  // Drag & Drop event handlers\n  // Handles drag over events during drag-and-drop operations\n  function handleDragOver(event) {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n\n  // Handles the end of a drag event and merges groups if necessary\n  function handleDragEnd(event) {\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        id1: event.active.id,\n        id2: event.over.id\n      };\n      sendMessage(Message.UPDATE, message);\n    }\n  }\n\n  // Monitors drag-and-drop events\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n\n  // Generates positions for the device groups based on their count\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  const positions = useMemo(() => generatePositions(deviceGroups.length), [deviceGroups]);\n\n  // Rendered JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center w-full min-w-full max-w-full overflow-x-clip mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-[90vmin] h-[90vmin] md:w-[35rem] md:h-[35rem]\",\n      children: [/*#__PURE__*/_jsxDEV(Clock, {\n        spin: deviceGroups.length <= 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), deviceGroups.map((group, idx) => {\n          return /*#__PURE__*/_jsxDEV(DndIcon, {\n            iconId: group.id,\n            left: positions[idx][0],\n            top: positions[idx][1],\n            bubble: group.bubble,\n            children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n              devices: group.devices,\n              color: group.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n}\n_s2(Crown, \"t7M71FpFUFX4p/VPEioVzFZjQwQ=\");\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","jsxDEV","_jsxDEV","Message","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","CLOSE_DEVICE","colors","generatePositions","numGroups","radius","positions","push","theta","Math","PI","i","round","cos","toString","sin","console","log","Crown","_s2","_s","$RefreshSig$","connection","name","type","ws","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","onclose","onClose","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","id","devices","addDevice","newId","findIndex","group","idx","length","color","bubble","sort","a","b","mergeGroups","id1","id2","updatedGroups","group1","find","g","mergedDevices","removeDevice","reduce","acc","newDevices","filter","message","data","readyState","OPEN","send","JSON","stringify","warn","event","parse","newDeviceList","oldId","handleDragOver","over","active","map","handleDragEnd","UPDATE","Monitor","onDragOver","onDragEnd","className","children","spin","fileName","_jsxFileName","lineNumber","columnNumber","iconId","left","top","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups) {\n    let radius = 13;\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push(['13.5','13.5']);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + 17.5-4).toString(),\n                (17.5-4-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    console.log(positions);\n    return positions;\n}\n\n\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const connection = useRef(null);\n    connection.name = \"\";\n    connection.type = \"\";\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:8080');\n        ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        ws.onclose = onClose;\n        connection.ws = ws;\n    },[])\n\n    const [deviceGroups, setDeviceGroups] = useState([]);\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = {}\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, colors:colors[i-1], devices:groupDeviceList})\n            }\n        }\n\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newId = deviceGroups.findIndex((group,idx) => group.id !== idx+1);\n            newId = newId === -1 ? deviceGroups.length + 1 : newId + 1;\n            return [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the device groups\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            deviceGroups.reduce((acc,group) => {\n                let newDevices = group.devices.filter(device => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n                return acc;\n            },[]);\n        });\n    };\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n            connection.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case Message.ADD_GROUPS:\n                let newDeviceList = message.devices;\n                addGroups(newDeviceList);\n                break;\n            case Message.ADD_DEVICE:\n                addDevice(message.name,message.type)\n                break;\n            case Message.MERGE_GROUPS:\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n    \n    // Handles WebSocket connection closure and removes the device\n    function onClose() {\n        removeDevice(connection.name);\n        let message = {name:connection.name};\n        sendMessage(Message.CLOSE_DEVICE, message);\n    }\n\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {id1:event.active.id,id2:event.over.id};\n            sendMessage(Message.UPDATE, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => generatePositions(deviceGroups.length),[deviceGroups]);\n\n    // Rendered JSX\n    return (\n        <div className='flex flex-col items-center w-full min-w-full max-w-full overflow-x-clip mt-5'>\n        <div className='relative w-[90vmin] h-[90vmin] md:w-[35rem] md:h-[35rem]'>\n            <Clock spin={deviceGroups.length <= 1}/>\n            <DndContext>\n            <Monitor/>\n            {deviceGroups.map((group,idx) => {\n                return (\n                <DndIcon iconId={group.id} key={idx} left={positions[idx][0]} top={positions[idx][1]} bubble={group.bubble}>\n                <DeviceGroup devices={group.devices} color={group.color}/>\n                </DndIcon>\n                )\n            })}\n            </DndContext>   \n        </div>\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}