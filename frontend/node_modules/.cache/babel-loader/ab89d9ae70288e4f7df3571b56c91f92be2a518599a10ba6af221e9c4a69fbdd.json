{"ast":null,"code":"import React,{useEffect,useState,useRef,useMemo}from'react';import Clock from'./Clock';import DeviceGroup from'./DeviceGroup';import{DndContext,useDndMonitor}from'@dnd-kit/core';import DndIcon from'./DnDIcon';import SyncButton from'./SyncButton';import Info from'./Info';import useSize from'./useSize';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Message=Object.freeze({CONNECTION:'Connection',ADD_DEVICE:'Add Device',ADD_GROUPS:'Add Groups',MERGE_GROUPS:'Merge Groups',UPDATE_CLIPBOARD:'Update Clipboard',GET_CLIPBOARD:'Get Clipboard',CLOSE_DEVICE:'Close Device'});// List of colors used for groups\nconst colors=['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width){let radius=width>=768?13:Number((13/35*width/16).toFixed(2));let originShift=width>=768?13.5:Number((11.5/35*width/16).toFixed(2));console.log(width,radius);let positions=[];if(numGroups===1){positions.push([originShift.toString(),originShift.toString()]);}else if(numGroups>=1){let theta=2*Math.PI/numGroups;for(let i=0;i<numGroups;++i){positions.push([(Math.round(radius*Math.cos(i*theta))+originShift).toString(),(originShift-Math.round(radius*Math.sin(i*theta))).toString()]);}}return positions;}// Main component for managing device groups and WebSocket connection\nfunction Crown(){var _deviceGroups$find,_deviceGroups$find2;// Hooks & State\nconst[thisDevice,setThisDevice]=useState({name:\"Caraxes\",type:\"\"});const windowSize=useSize();const connection=useRef(null);useEffect(()=>{// const ws = new WebSocket('ws://localhost:8080');\n// ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n// ws.onmessage = handleMessage;\n// ws.onclose = onClose;\n// connection.ws = ws\n},[]);const[deviceGroups,setDeviceGroups]=useState([{id:1,color:colors[0],devices:[{name:\"Vermithor\",type:'A'}],bubble:false}]);// State Change Helper methods\n// Adds new device groups based on the provided device list\nconst addGroups=deviceList=>{let newDeviceGroups=[];let groupsMap=new Map();let maxId=0;deviceList.forEach(device=>{if(!groupsMap.has(device.groupId)){groupsMap.set(device.groupId,[]);}groupsMap.get(device.groupId).push({name:device.name,type:device.type});maxId=Math.max(maxId,device.groupId);});for(let i=1;i<=maxId;++i){if(groupsMap.has(i)){let groupDeviceList=groupsMap.get(i);newDeviceGroups.push({id:i,color:colors[i-1],devices:groupDeviceList,bubble:groupDeviceList.length>1});}}console.log(newDeviceGroups);setDeviceGroups(newDeviceGroups);};// Adds a new device to the device groups\nconst addDevice=(newId,name,type)=>{setDeviceGroups(deviceGroups=>{let newDeviceGroups=[...deviceGroups,{id:newId,color:colors[newId-1],devices:[{name:name,type:type}],bubble:false}].sort((a,b)=>a.id-b.id);console.log(newDeviceGroups);return newDeviceGroups;});};// Merges two device groups into one\nconst mergeGroups=(id1,id2)=>{setDeviceGroups(deviceGroups=>{let updatedGroups=[];for(let group of deviceGroups){if(group.id===id2){const group1=deviceGroups.find(g=>g.id===id1);const mergedDevices=[...group.devices,...group1.devices];updatedGroups.push({...group,devices:mergedDevices,bubble:mergedDevices.length>1});}else if(group.id!==id1){// Skip group id1 since it will be merged later\nupdatedGroups.push(group);}}return updatedGroups;});};// Removes a device by name from the device groups\nconst removeDevice=name=>{setDeviceGroups(deviceGroups=>{deviceGroups.reduce((acc,group)=>{let newDevices=group.devices.filter(device=>device.name!==name);if(newDevices.length>0){acc.push({...group,devices:newDevices});}return acc;},[]);});};// Websocket handlers\nasync function sendMessage(type,message){const data={type,message};// if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n//     console.log('Sent Message',data)\n//     connection.ws.send(JSON.stringify(data));\n// } else {\n//     console.warn('WebSocket is not open. Cannot send message.');\n// }\n}// Handles incoming WebSocket messages and updates state accordingly\nfunction handleMessage(event){const{type,message}=JSON.parse(event.data);console.log(type,message);switch(type){case Message.ADD_GROUPS:addGroups(message.devices);setThisDevice({name:message.name,type:message.type});break;case Message.ADD_DEVICE:addDevice(message.groupId,message.name,message.type);break;case Message.MERGE_GROUPS:mergeGroups(message.oldId,message.newId);break;case Message.CLOSE_DEVICE:removeDevice(message.name);break;default:console.warn(\"Unhandled message type: \".concat(type));}}// Handles WebSocket connection closure and removes the device\nfunction onClose(){// removeDevice(connection.name);\n// let message = {name:connection.name};\n// sendMessage(Message.CLOSE_DEVICE, message);\n}// Drag & Drop event handlers\n// Handles drag over events during drag-and-drop operations\nfunction handleDragOver(event){if(event.over==null||event.over.id===event.active.id){setDeviceGroups(deviceGroups.map(group=>{return{...group,color:colors[group.id-1],bubble:group.devices.length>1};}));}else{setDeviceGroups(deviceGroups.map(group=>{if(group.id===event.active.id){return{...group,color:colors[event.over.id-1],bubble:group.devices.length>1};}else if(group.id===event.over.id){return{...group,color:colors[event.over.id-1],bubble:true};}else{return{...group,color:colors[group.id-1],bubble:group.devices.length>1};}}));}}// Handles the end of a drag event and merges groups if necessary\nfunction handleDragEnd(event){if(event.over!==null&&event.over.id!==event.active.id){mergeGroups(event.active.id,event.over.id);let message={oldId:event.active.id,newId:event.over.id};sendMessage(Message.MERGE_GROUPS,message);}}// Monitors drag-and-drop events\nfunction Monitor(){useDndMonitor({onDragOver(event){handleDragOver(event);},onDragEnd(event){handleDragEnd(event);}});}// Generates positions for the device groups based on their count\nconst positions=useMemo(()=>{return deviceGroups?generatePositions(deviceGroups.length,windowSize[1]):[];},[deviceGroups,windowSize]);// Rendered JSX\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col place-content-center place-items-center md:flex-row md:mt-10\",children:[windowSize[1]<768?/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-row place-content-evenly place-items-evenly\",children:[/*#__PURE__*/_jsx(Info,{outerDivClasses:\"mx-auto scale-75 md:scale-100\",name:thisDevice.name,color:(_deviceGroups$find=deviceGroups.find(group=>group.devices.some(device=>device.name===thisDevice.name)))===null||_deviceGroups$find===void 0?void 0:_deviceGroups$find.color,type:\"E\"}),/*#__PURE__*/_jsx(SyncButton,{outerDivClasses:\"mx-auto scale-[0.7] md:scale-100\",color:\"green\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Info,{outerDivClasses:\"mx-auto order-1 scale-75 md:scale-100\",name:thisDevice.name,color:(_deviceGroups$find2=deviceGroups.find(group=>group.devices.some(device=>device.name===thisDevice.name)))===null||_deviceGroups$find2===void 0?void 0:_deviceGroups$find2.color,type:\"E\"}),/*#__PURE__*/_jsx(SyncButton,{outerDivClasses:\"mx-auto order-3 scale-[0.7] md:scale-100\",color:\"green\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",children:[/*#__PURE__*/_jsx(Clock,{spin:deviceGroups?deviceGroups.length<=1:true,width:windowSize[1]}),/*#__PURE__*/_jsxs(DndContext,{children:[/*#__PURE__*/_jsx(Monitor,{}),deviceGroups&&deviceGroups.map((group,idx)=>{return/*#__PURE__*/_jsx(DndIcon,{iconId:group.id,top:positions[idx][0],left:positions[idx][1],bubble:group.bubble,children:/*#__PURE__*/_jsx(DeviceGroup,{devices:group.devices,color:group.color})},idx);})]})]})]});}export default Crown;","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","Info","useSize","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Message","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","CLOSE_DEVICE","colors","generatePositions","numGroups","width","radius","Number","toFixed","originShift","console","log","positions","push","toString","theta","Math","PI","i","round","cos","sin","Crown","_deviceGroups$find","_deviceGroups$find2","thisDevice","setThisDevice","name","type","windowSize","connection","deviceGroups","setDeviceGroups","id","color","devices","bubble","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","reduce","acc","newDevices","filter","sendMessage","message","data","handleMessage","event","JSON","parse","oldId","warn","concat","onClose","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","className","children","outerDivClasses","some","spin","idx","iconId","top","left"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport Info from './Info';\nimport useSize from './useSize';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    let radius = width >= 768 ? 13 : Number(((13/35)*width/16).toFixed(2))\n    let originShift = width >= 768 ? 13.5 : Number(((11.5/35)*width/16).toFixed(2))\n    console.log(width,radius)\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\n\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const [thisDevice,setThisDevice] = useState({\n        name:\"Caraxes\",\n        type:\"\"\n    });\n\n    const windowSize = useSize();\n\n    const connection = useRef(null);\n    useEffect(() => {\n        // const ws = new WebSocket('ws://localhost:8080');\n        // ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n        // ws.onmessage = handleMessage;\n        // ws.onclose = onClose;\n        // connection.ws = ws\n        \n    },[])\n\n    const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        console.log(newDeviceGroups)\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            console.log(newDeviceGroups)\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the device groups\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            deviceGroups.reduce((acc,group) => {\n                let newDevices = group.devices.filter(device => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n                return acc;\n            },[]);\n        });\n    };\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        // if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n        //     console.log('Sent Message',data)\n        //     connection.ws.send(JSON.stringify(data));\n        // } else {\n        //     console.warn('WebSocket is not open. Cannot send message.');\n        // }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case Message.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type})\n                break;\n            case Message.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case Message.MERGE_GROUPS:\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n    \n    // Handles WebSocket connection closure and removes the device\n    function onClose() {\n        // removeDevice(connection.name);\n        // let message = {name:connection.name};\n        // sendMessage(Message.CLOSE_DEVICE, message);\n    }\n\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(Message.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,windowSize[1]) : []\n    }, [deviceGroups,windowSize])\n\n\n    // Rendered JSX\n    return (\n        <div className='flex flex-col place-content-center place-items-center md:flex-row md:mt-10'>\n            {windowSize[1] < 768 ? (\n                <div className='flex flex-row place-content-evenly place-items-evenly'>\n                    <Info outerDivClasses='mx-auto scale-75 md:scale-100' name={thisDevice.name} color={deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))?.color} type='E'/>\n                    <SyncButton outerDivClasses='mx-auto scale-[0.7] md:scale-100' color='green'/>\n                </div>\n\n            ): (\n                <>\n                    <Info outerDivClasses='mx-auto order-1 scale-75 md:scale-100' name={thisDevice.name} color={deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))?.color} type='E'/>\n                    <SyncButton outerDivClasses='mx-auto order-3 scale-[0.7] md:scale-100' color='green'/>\n                </>\n            )}\n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length <= 1 : true} width={windowSize[1]}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}