{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  UPDATE: 'Update',\n  CLOSE_DEVICE: 'Close Device'\n});\nconst colors = ['bg-emerald-500', 'bg-sky-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\nfunction generatePositions(numGroups) {\n  let radius = 13;\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push([[\"1/2\", \"1/2\"]]);\n  } else {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + 17.5 - 4).toString(), (17.5 - 4 - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  return positions;\n}\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hooks & State\n  const connection = useRef(null);\n  connection.name = \"\";\n  connection.type = \"\";\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');\n    console.log('hi');\n    ws.onopen = event => {\n      if (ws.readyState === WebSocket.OPEN) {\n        sendMessage(Message.CONNECTION, {\n          text: \"Device connected successfully\"\n        });\n      }\n    };\n    // ws.onmessage = handleMessage;\n    // ws.onclose = onClose;\n    connection.ws = ws;\n  }, []);\n  const [deviceGroups, setDeviceGroups] = useState([]);\n\n  // State Change Helper methods\n  const addDeviceGroup = (name, type) => {\n    let newId = 1;\n    for (let group of deviceGroups) {\n      if (group.id !== newId) {\n        break;\n      }\n      newId += 1;\n    }\n    setDeviceGroups([...deviceGroups, {\n      id: newId,\n      color: colors[newId],\n      devices: [{\n        name: name,\n        type: type\n      }],\n      bubble: false\n    }]);\n  };\n  const mergeGroups = (id1, id2) => {\n    const updatedDeviceGroups = deviceGroups.reduce((acc, group) => {\n      if (group.id === id1) {\n        return acc; // Skip this group as it will be merged\n      } else if (group.id === id2) {\n        const group1 = deviceGroups.find(g => g.id === id1);\n        const mergedDevices = [...group.devices, ...group1.devices];\n        acc.push({\n          ...group,\n          devices: mergedDevices\n        });\n      } else {\n        acc.push(group);\n      }\n      return acc;\n    }, []);\n    setDeviceGroups(updatedDeviceGroups);\n  };\n  const removeDevice = name => {\n    const newGroups = deviceGroups.reduce((acc, group) => {\n      let newDevices = group.devices.filter(device => device.name !== name);\n      if (newDevices.length > 0) {\n        acc.push({\n          ...group,\n          devices: newDevices\n        });\n      }\n      return acc;\n    }, []);\n    setDeviceGroups(newGroups);\n  };\n\n  // Websocket handlers\n  function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    connection.ws.send(JSON.stringify(data));\n  }\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    switch (type) {\n      case Message.ADD_DEVICE:\n        addDeviceGroup(message.name, message.type);\n        if (!connection.name) {\n          connection.name = message.name;\n        }\n        break;\n      case Message.UPDATE:\n        mergeGroups(message.id1, message.id2);\n        break;\n      case Message.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n  function onClose() {\n    // removeDevice(connection.name);\n    // let message = {name:connection.name};\n    // sendMessage(Message.CLOSE_DEVICE, message);\n  }\n\n  // Drag & Drop event handlers\n  let positions = generatePositions(deviceGroups.length);\n  function handleDragOver(event) {\n    console.log('Drag over event triggered');\n    console.log(event);\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n  function handleDragEnd(event) {\n    console.log('Drag end event');\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        id1: event.active.id,\n        id2: event.over.id\n      };\n      sendMessage(Message.UPDATE, message);\n    }\n  }\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n\n  // Rendered JSX\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center w-full min-w-full max-w-full overflow-x-clip mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-[90vmin] h-[90vmin] md:w-[35rem] md:h-[35rem]\",\n      children: [/*#__PURE__*/_jsxDEV(Clock, {\n        spin: deviceGroups.length <= 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), deviceGroups.map((group, idx) => {\n          return /*#__PURE__*/_jsxDEV(DndIcon, {\n            iconId: group.id,\n            left: positions[idx][0],\n            top: positions[idx][1],\n            bubble: group.bubble,\n            children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n              devices: group.devices,\n              color: group.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n}\n_s2(Crown, \"bKYruUnjgpuNcUe1vjKLTsNGmDc=\");\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","jsxDEV","_jsxDEV","Message","Object","freeze","CONNECTION","ADD_DEVICE","UPDATE","CLOSE_DEVICE","colors","generatePositions","numGroups","radius","positions","push","theta","Math","PI","i","round","cos","toString","sin","Crown","_s2","_s","$RefreshSig$","connection","name","type","ws","WebSocket","console","log","onopen","event","readyState","OPEN","sendMessage","text","deviceGroups","setDeviceGroups","addDeviceGroup","newId","group","id","color","devices","bubble","mergeGroups","id1","id2","updatedDeviceGroups","reduce","acc","group1","find","g","mergedDevices","removeDevice","newGroups","newDevices","filter","device","length","message","data","send","JSON","stringify","handleMessage","parse","warn","onClose","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","className","children","spin","fileName","_jsxFileName","lineNumber","columnNumber","idx","iconId","left","top","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    UPDATE: 'Update',\n    CLOSE_DEVICE: 'Close Device'\n})\n\nconst colors = ['bg-emerald-500','bg-sky-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\nfunction generatePositions(numGroups) {\n    let radius = 13;\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([[\"1/2\",\"1/2\"]]);\n    } else {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + 17.5-4).toString(),\n                (17.5-4-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\n\n\nfunction Crown() {\n    // Hooks & State\n    const connection = useRef(null);\n    connection.name = \"\";\n    connection.type = \"\";\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:8080');\n        console.log('hi')\n        ws.onopen = (event) => {\n            if (ws.readyState === WebSocket.OPEN) {\n                sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"});\n            }\n        };\n        // ws.onmessage = handleMessage;\n        // ws.onclose = onClose;\n        connection.ws = ws;\n    },[]) \n\n    const [deviceGroups, setDeviceGroups] = useState([]);\n\n    // State Change Helper methods\n    const addDeviceGroup = (name,type) => {\n        let newId = 1;\n        for (let group of deviceGroups) {\n            if (group.id !== newId) {\n                break;\n            }\n            newId += 1;\n        }\n        setDeviceGroups([...deviceGroups, {id:newId, color:colors[newId], devices:[{name:name,type:type}], bubble:false}]);\n    };\n\n    const mergeGroups = (id1,id2) => {\n        const updatedDeviceGroups = deviceGroups.reduce((acc, group) => {\n            if (group.id === id1) {\n                return acc; // Skip this group as it will be merged\n            } else if (group.id === id2) {\n                const group1 = deviceGroups.find(g => g.id === id1);\n                const mergedDevices = [...group.devices, ...group1.devices];\n                acc.push({...group, devices: mergedDevices});\n            } else {\n                acc.push(group);\n            }\n            return acc;\n        }, []);\n\n        setDeviceGroups(updatedDeviceGroups);\n    }\n\n    const removeDevice = (name) => {\n        const newGroups = deviceGroups.reduce((acc,group) => {\n            let newDevices = group.devices.filter(device => device.name !== name);\n            if (newDevices.length > 0) {\n                acc.push({...group,devices:newDevices})\n            }\n            return acc;\n        },[]);\n\n        setDeviceGroups(newGroups);\n    };\n\n    // Websocket handlers\n    function sendMessage(type,message) {\n        const data = {type, message}\n        connection.ws.send(JSON.stringify(data));\n    }\n    \n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        switch(type) {\n            case Message.ADD_DEVICE:\n                addDeviceGroup(message.name, message.type);\n                if (!connection.name) {\n                    connection.name = message.name;\n                } \n                break;\n            case Message.UPDATE:\n                mergeGroups(message.id1,message.id2);\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n        }\n    }\n    \n    function onClose() {\n        // removeDevice(connection.name);\n        // let message = {name:connection.name};\n        // sendMessage(Message.CLOSE_DEVICE, message);\n    }\n\n\n    // Drag & Drop event handlers\n    let positions = generatePositions(deviceGroups.length);\n\n    function handleDragOver(event) {\n        console.log('Drag over event triggered');\n        console.log(event);\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    function handleDragEnd(event) {\n        console.log('Drag end event')\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {id1:event.active.id, id2:event.over.id};\n            sendMessage(Message.UPDATE, message);\n        }\n    }\n\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n\n    // Rendered JSX\n    return (\n        <div className='flex flex-col items-center w-full min-w-full max-w-full overflow-x-clip mt-5'>\n        <div className='relative w-[90vmin] h-[90vmin] md:w-[35rem] md:h-[35rem]'>\n            <Clock spin={deviceGroups.length <= 1}/>\n            <DndContext>\n            <Monitor/>\n            {deviceGroups.map((group,idx) => {\n                return (\n                <DndIcon iconId={group.id} key={idx} left={positions[idx][0]} top={positions[idx][1]} bubble={group.bubble}>\n                <DeviceGroup devices={group.devices} color={group.color}/>\n                </DndIcon>\n                )\n            })}\n            </DndContext>   \n        </div>\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}