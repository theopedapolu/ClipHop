{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/DeviceGroup.js\";\nimport React from \"react\";\nimport Mac from './icons/Mac.js';\nimport iPhone from './icons/iPhone.js';\nimport iPad from './icons/iPad.js';\nimport Android from './icons/Android.js';\nimport PC from './icons/PC.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst iconMap = {\n  'Android': Android,\n  'iPad': iPad,\n  'iPhone': iPhone,\n  'Mac': Mac,\n  'PC': PC\n};\nfunction getGridParams(devices) {\n  // Find num rows and num cols\n  if (devices.length === 1) {\n    return {\n      numRows: 1,\n      numCols: 1\n    };\n  } else if (devices.length === 2) {\n    return {\n      numRows: 1,\n      numCols: 2\n    };\n  } else {\n    return {\n      numRows: 2,\n      numCols: 2\n    };\n  }\n}\nfunction DeviceGroup({\n  devices,\n  color = \"bg-green-500\"\n}) {\n  const {\n    numRows,\n    numCols\n  } = getGridParams(devices);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid place-items-center w-fit\",\n    style: {\n      gridTemplateRows: `repeat(${numRows}, minmax(0, 1fr))`,\n      gridTemplateColumns: `repeat(${numCols}, minmax(0, 1fr))`\n    },\n    children: devices.map((device, idx) => {\n      const DeviceIcon = iconMap[device.type];\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `${idx === 2 ? 'col-span-2' : '-mb-5'} rounded-full ${color} p-3`,\n        children: /*#__PURE__*/_jsxDEV(DeviceIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this)\n      }, device.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_c = DeviceGroup;\nexport default DeviceGroup;\nvar _c;\n$RefreshReg$(_c, \"DeviceGroup\");","map":{"version":3,"names":["React","Mac","iPhone","iPad","Android","PC","jsxDEV","_jsxDEV","iconMap","getGridParams","devices","length","numRows","numCols","DeviceGroup","color","className","style","gridTemplateRows","gridTemplateColumns","children","map","device","idx","DeviceIcon","type","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/DeviceGroup.js"],"sourcesContent":["import React from \"react\";\nimport Mac from './icons/Mac.js';\nimport iPhone from './icons/iPhone.js';\nimport iPad from './icons/iPad.js';\nimport Android from './icons/Android.js';\nimport PC from './icons/PC.js';\n\nconst iconMap = {\n    'Android': Android,\n    'iPad':iPad,\n    'iPhone':iPhone,\n    'Mac':Mac,\n    'PC':PC\n}\n\nfunction getGridParams(devices) {\n    // Find num rows and num cols\n    if (devices.length === 1) {\n        return {numRows:1,numCols:1}\n    } else if (devices.length === 2) {\n        return {numRows:1,numCols:2}\n    } else {\n        return {numRows:2,numCols:2}\n    }\n\n}\n\n\nfunction DeviceGroup({devices, color=\"bg-green-500\"}) {\n    const {numRows,numCols} = getGridParams(devices)\n    return (\n        <div className='grid place-items-center w-fit' style={{gridTemplateRows:`repeat(${numRows}, minmax(0, 1fr))`,gridTemplateColumns:`repeat(${numCols}, minmax(0, 1fr))`}}>\n            {devices.map((device,idx) => {\n                const DeviceIcon = iconMap[device.type];\n                return (\n                    <span key={device.name} className={`${idx===2 ? 'col-span-2':'-mb-5'} rounded-full ${color} p-3`}>\n                        <DeviceIcon/>\n                    </span>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default DeviceGroup;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,gBAAgB;AAChC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,EAAE,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,OAAO,GAAG;EACZ,SAAS,EAAEJ,OAAO;EAClB,MAAM,EAACD,IAAI;EACX,QAAQ,EAACD,MAAM;EACf,KAAK,EAACD,GAAG;EACT,IAAI,EAACI;AACT,CAAC;AAED,SAASI,aAAaA,CAACC,OAAO,EAAE;EAC5B;EACA,IAAIA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO;MAACC,OAAO,EAAC,CAAC;MAACC,OAAO,EAAC;IAAC,CAAC;EAChC,CAAC,MAAM,IAAIH,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IAC7B,OAAO;MAACC,OAAO,EAAC,CAAC;MAACC,OAAO,EAAC;IAAC,CAAC;EAChC,CAAC,MAAM;IACH,OAAO;MAACD,OAAO,EAAC,CAAC;MAACC,OAAO,EAAC;IAAC,CAAC;EAChC;AAEJ;AAGA,SAASC,WAAWA,CAAC;EAACJ,OAAO;EAAEK,KAAK,GAAC;AAAc,CAAC,EAAE;EAClD,MAAM;IAACH,OAAO;IAACC;EAAO,CAAC,GAAGJ,aAAa,CAACC,OAAO,CAAC;EAChD,oBACIH,OAAA;IAAKS,SAAS,EAAC,+BAA+B;IAACC,KAAK,EAAE;MAACC,gBAAgB,EAAE,UAASN,OAAQ,mBAAkB;MAACO,mBAAmB,EAAE,UAASN,OAAQ;IAAkB,CAAE;IAAAO,QAAA,EAClKV,OAAO,CAACW,GAAG,CAAC,CAACC,MAAM,EAACC,GAAG,KAAK;MACzB,MAAMC,UAAU,GAAGhB,OAAO,CAACc,MAAM,CAACG,IAAI,CAAC;MACvC,oBACIlB,OAAA;QAAwBS,SAAS,EAAG,GAAEO,GAAG,KAAG,CAAC,GAAG,YAAY,GAAC,OAAQ,iBAAgBR,KAAM,MAAM;QAAAK,QAAA,eAC7Fb,OAAA,CAACiB,UAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC,GADNP,MAAM,CAACQ,IAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CAAC;IAEf,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACE,EAAA,GAdQjB,WAAW;AAgBpB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}