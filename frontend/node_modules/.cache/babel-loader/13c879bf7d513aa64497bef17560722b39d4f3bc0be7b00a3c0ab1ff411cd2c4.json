{"ast":null,"code":"import{useState,useMemo}from\"react\";// List of colors used for groups\nconst colors=['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width){// let radius = width >= 768 ? 13 : Number(((13.75/35)*width/16))\n// let originShift = width >= 768 ? 13.5 : Number(((11.75/35)*width/16))\nlet radius=width>=768?14:Number(14/35*width/16);let originShift=width>=768?17:Number(17/35*width/16);let positions=[];if(numGroups===1){positions.push([originShift.toString(),originShift.toString()]);}else if(numGroups>=1){let theta=2*Math.PI/numGroups;for(let i=0;i<numGroups;++i){positions.push([(Math.round(radius*Math.cos(i*theta))+originShift).toString(),(originShift-Math.round(radius*Math.sin(i*theta))).toString()]);}}return positions;}function useDevices(){const[thisDevice,setThisDevice]=useState({name:\"\",type:\"\",id:1,syncButtonColor:'green'});// const [deviceGroups, setDeviceGroups] = useState([{id:1,color:colors[0],devices:[{name:'Vermithor1',type:'Mac'},{name:'Vermithor2',type:'Mac'},{name:'Vermithor3',type:'Mac'}]},{id:2,color:colors[1],devices:[{name:'Vermithor1',type:'Mac'},{name:'Vermithor2',type:'Mac'},{name:'Vermithor3',type:'Mac'}]}])\nconst[deviceGroups,setDeviceGroups]=useState([]);/*\n        deviceGroups state handlers\n    */ // Adds new device groups based on the provided device list\nconst addGroups=deviceList=>{let newDeviceGroups=[];let groupsMap=new Map();let maxId=0;deviceList.forEach(device=>{if(!groupsMap.has(device.groupId)){groupsMap.set(device.groupId,[]);}groupsMap.get(device.groupId).push({name:device.name,type:device.type});maxId=Math.max(maxId,device.groupId);});for(let i=1;i<=maxId;++i){if(groupsMap.has(i)){let groupDeviceList=groupsMap.get(i);newDeviceGroups.push({id:i,color:colors[i-1],devices:groupDeviceList});}}setDeviceGroups(newDeviceGroups);};// Adds a new device to the device groups\nconst addDevice=(newId,name,type)=>{setDeviceGroups(deviceGroups=>{let newDeviceGroups=[...deviceGroups,{id:newId,color:colors[newId-1],devices:[{name:name,type:type}]}].sort((a,b)=>a.id-b.id);return newDeviceGroups;});};// Merges two device groups into one\nconst mergeGroups=(id1,id2)=>{setDeviceGroups(deviceGroups=>{let updatedGroups=[];for(let group of deviceGroups){if(group.id===id2){const group1=deviceGroups.find(g=>g.id===id1);const mergedDevices=[...group.devices,...group1.devices];updatedGroups.push({...group,devices:mergedDevices});}else if(group.id!==id1){// Skip group id1 since it will be merged later\nupdatedGroups.push(group);}}return updatedGroups;});};// Removes a device by name from the deviceGroups state\nconst removeDevice=name=>{setDeviceGroups(deviceGroups=>{let acc=[];for(let group of deviceGroups){let newDevices=group.devices.filter(device=>device.name!==name);if(newDevices.length>0){acc.push({...group,devices:newDevices});}}return acc;});};const deviceDragOver=event=>{if(event.over==null||event.over.id===event.active.id){setDeviceGroups(deviceGroups.map(group=>{return{...group,color:colors[group.id-1]};}));}else{setDeviceGroups(deviceGroups.map(group=>{if(group.id===event.active.id){return{...group,color:colors[event.over.id-1]};}else if(group.id===event.over.id){return{...group,color:colors[event.over.id-1]};}else{return{...group,color:colors[group.id-1]};}}));}};// Generates positions for the device groups based on their count\nconst positions=useMemo(()=>{return deviceGroups?generatePositions(deviceGroups.length,window.innerWidth):[];},[deviceGroups]);return{thisDevice,setThisDevice,deviceGroups,addGroups,addDevice,mergeGroups,removeDevice,deviceDragOver,positions};}export default useDevices;","map":{"version":3,"names":["useState","useMemo","colors","generatePositions","numGroups","width","radius","Number","originShift","positions","push","toString","theta","Math","PI","i","round","cos","sin","useDevices","thisDevice","setThisDevice","name","type","id","syncButtonColor","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","color","devices","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","acc","newDevices","filter","length","deviceDragOver","event","over","active","map","window","innerWidth"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/useDevices.js"],"sourcesContent":["import {useState, useMemo} from \"react\";\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    // let radius = width >= 768 ? 13 : Number(((13.75/35)*width/16))\n    // let originShift = width >= 768 ? 13.5 : Number(((11.75/35)*width/16))\n    let radius = width >= 768 ? 14 : Number(((14/35)*width/16))\n    let originShift = width >= 768 ? 17 : Number(((17/35)*width/16))\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\nfunction useDevices() {\n    const [thisDevice,setThisDevice] = useState({\n        name:\"\",\n        type:\"\",\n        id:1,\n        syncButtonColor:'green'\n    });\n    // const [deviceGroups, setDeviceGroups] = useState([{id:1,color:colors[0],devices:[{name:'Vermithor1',type:'Mac'},{name:'Vermithor2',type:'Mac'},{name:'Vermithor3',type:'Mac'}]},{id:2,color:colors[1],devices:[{name:'Vermithor1',type:'Mac'},{name:'Vermithor2',type:'Mac'},{name:'Vermithor3',type:'Mac'}]}])\n    const [deviceGroups,setDeviceGroups] = useState([])\n    /*\n        deviceGroups state handlers\n    */\n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList})\n            }\n        }\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}]}].sort((a,b) => (a.id-b.id))\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the deviceGroups state\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            let acc = []\n            for (let group of deviceGroups) {\n                let newDevices = group.devices.filter((device) => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n            }\n            return acc\n        });\n    }\n\n    const deviceDragOver = (event) => {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1]}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1]}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1]}\n                } else {\n                    return {...group,color:colors[group.id-1]}\n                }\n            }))\n        }\n    }\n\n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,window.innerWidth) : []\n    }, [deviceGroups])\n\n\n    return {thisDevice,setThisDevice,deviceGroups,addGroups,addDevice,mergeGroups,removeDevice,deviceDragOver,positions}\n}\n\nexport default useDevices"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}