{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Message = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  ADD_GROUPS: 'Add Groups',\n  MERGE_GROUPS: 'Merge Groups',\n  UPDATE_CLIPBOARD: 'Update Clipboard',\n  GET_CLIPBOARD: 'Get Clipboard',\n  CLOSE_DEVICE: 'Close Device'\n});\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups, width) {\n  let radius = width >= 768 ? 13 : Number((13 / 35 * width / 16).toFixed(2));\n  let originShift = width >= 768 ? 13.5 : Number((11.5 / 35 * width / 16).toFixed(2));\n  console.log(width, radius);\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push([originShift.toString(), originShift.toString()]);\n  } else if (numGroups >= 1) {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + originShift).toString(), (originShift - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  return positions;\n}\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$(),\n    _deviceGroups$find,\n    _deviceGroups$find2;\n  // Hooks & State\n  const [thisDevice, setThisDevice] = useState({\n    name: \"Caraxes\",\n    type: \"\",\n    syncButtonColor: 'green'\n  });\n  const windowSize = useSize();\n  const connection = useRef(null);\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');\n    ws.onopen = () => {\n      sendMessage(Message.CONNECTION, {\n        text: \"Device connected successfully\"\n      });\n    };\n    ws.onmessage = handleMessage;\n    ws.onclose = onClose;\n    connection.ws = ws;\n  }, []);\n  const [deviceGroups, setDeviceGroups] = useState([{\n    id: 1,\n    color: colors[0],\n    devices: [{\n      name: \"Vermithor\",\n      type: 'A'\n    }],\n    bubble: false\n  }]);\n\n  // State Change Helper methods\n\n  // Adds new device groups based on the provided device list\n  const addGroups = deviceList => {\n    let newDeviceGroups = [];\n    let groupsMap = new Map();\n    let maxId = 0;\n    deviceList.forEach(device => {\n      if (!groupsMap.has(device.groupId)) {\n        groupsMap.set(device.groupId, []);\n      }\n      groupsMap.get(device.groupId).push({\n        name: device.name,\n        type: device.type\n      });\n      maxId = Math.max(maxId, device.groupId);\n    });\n    for (let i = 1; i <= maxId; ++i) {\n      if (groupsMap.has(i)) {\n        let groupDeviceList = groupsMap.get(i);\n        newDeviceGroups.push({\n          id: i,\n          color: colors[i - 1],\n          devices: groupDeviceList,\n          bubble: groupDeviceList.length > 1\n        });\n      }\n    }\n    console.log(newDeviceGroups);\n    setDeviceGroups(newDeviceGroups);\n  };\n\n  // Adds a new device to the device groups\n  const addDevice = (newId, name, type) => {\n    setDeviceGroups(deviceGroups => {\n      let newDeviceGroups = [...deviceGroups, {\n        id: newId,\n        color: colors[newId - 1],\n        devices: [{\n          name: name,\n          type: type\n        }],\n        bubble: false\n      }].sort((a, b) => a.id - b.id);\n      console.log(newDeviceGroups);\n      return newDeviceGroups;\n    });\n  };\n\n  // Merges two device groups into one\n  const mergeGroups = (id1, id2) => {\n    setDeviceGroups(deviceGroups => {\n      let updatedGroups = [];\n      for (let group of deviceGroups) {\n        if (group.id === id2) {\n          const group1 = deviceGroups.find(g => g.id === id1);\n          const mergedDevices = [...group.devices, ...group1.devices];\n          updatedGroups.push({\n            ...group,\n            devices: mergedDevices,\n            bubble: mergedDevices.length > 1\n          });\n        } else if (group.id !== id1) {\n          // Skip group id1 since it will be merged later\n          updatedGroups.push(group);\n        }\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Removes a device by name from the device groups\n  const removeDevice = name => {\n    setDeviceGroups(deviceGroups => {\n      deviceGroups.reduce((acc, group) => {\n        let newDevices = group.devices.filter(device => device.name !== name);\n        if (newDevices.length > 0) {\n          acc.push({\n            ...group,\n            devices: newDevices\n          });\n        }\n        return acc;\n      }, []);\n    });\n  };\n\n  // Websocket handlers\n  async function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n      console.log('Sent Message', data);\n      connection.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not open. Cannot send message.');\n    }\n  }\n\n  // Handles incoming WebSocket messages and updates state accordingly\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    console.log(type, message);\n    switch (type) {\n      case Message.ADD_GROUPS:\n        addGroups(message.devices);\n        setThisDevice({\n          name: message.name,\n          type: message.type\n        });\n        break;\n      case Message.ADD_DEVICE:\n        addDevice(message.groupId, message.name, message.type);\n        break;\n      case Message.MERGE_GROUPS:\n        mergeGroups(message.oldId, message.newId);\n        break;\n      case Message.UPDATE_CLIPBOARD:\n        connection.clipboard = message.newClipboard;\n        setThisDevice(d => ({\n          device: d.name,\n          type: d.type,\n          syncButtonColor: 'red'\n        }));\n        break;\n      case Message.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n\n  // Updates Clipboard\n  async function updateClipboard() {\n    await navigator.clipboard.writeText(connection.clipboard);\n  }\n\n  // Updates Group Clipboard\n  async function updateGroupClipboard() {\n    const data = await navigator.clipboard.readText();\n    if (connection.clipboard !== data) {\n      connection.clipboard = data;\n      const message = {\n        clipboard: connection.clipboard\n      };\n      this.sendMessage(Message.UPDATE_CLIPBOARD, message);\n    }\n  }\n\n  // Handles WebSocket connection closure and removes the device\n  function onClose() {\n    // removeDevice(connection.name);\n    // let message = {name:connection.name};\n    // sendMessage(Message.CLOSE_DEVICE, message);\n  }\n\n  // Drag & Drop event handlers\n  // Handles drag over events during drag-and-drop operations\n  function handleDragOver(event) {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n\n  // Handles the end of a drag event and merges groups if necessary\n  function handleDragEnd(event) {\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        oldId: event.active.id,\n        newId: event.over.id\n      };\n      sendMessage(Message.MERGE_GROUPS, message);\n    }\n  }\n\n  // Monitors drag-and-drop events\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n\n  // Generates positions for the device groups based on their count\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  const positions = useMemo(() => {\n    return deviceGroups ? generatePositions(deviceGroups.length, windowSize[1]) : [];\n  }, [deviceGroups, windowSize]);\n\n  // Rendered JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10\",\n    children: [windowSize[1] < 768 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Info, {\n        outerDivClasses: \"mx-auto order-1 scale-75\",\n        name: thisDevice.name,\n        color: (_deviceGroups$find = deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))) === null || _deviceGroups$find === void 0 ? void 0 : _deviceGroups$find.color,\n        type: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-3 flex flex-row place-content-evenly ml-5\",\n        style: {\n          marginTop: `${windowSize[1] + 10}px`\n        },\n        children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n          outerDivClasses: \"mx-auto scale-75\",\n          color: thisDevice.syncButtonColor,\n          onClick: updateClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n          outerDivClasses: \"mx-auto scale-75\",\n          onClick: updateGroupClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Info, {\n        outerDivClasses: \"order-1 scale-75 md:scale-100\",\n        name: thisDevice.name,\n        color: (_deviceGroups$find2 = deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))) === null || _deviceGroups$find2 === void 0 ? void 0 : _deviceGroups$find2.color,\n        type: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0\",\n        children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n          outerDivClasses: \"md:my-12\",\n          color: thisDevice.syncButtonColor,\n          onClick: updateClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n          onClick: updateGroupClipboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",\n      children: [/*#__PURE__*/_jsxDEV(Clock, {\n        spin: deviceGroups ? deviceGroups.length <= 1 : true,\n        width: windowSize[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 17\n        }, this), deviceGroups && deviceGroups.map((group, idx) => {\n          return /*#__PURE__*/_jsxDEV(DndIcon, {\n            iconId: group.id,\n            top: positions[idx][0],\n            left: positions[idx][1],\n            bubble: group.bubble,\n            children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n              devices: group.devices,\n              color: group.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 21\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 9\n  }, this);\n}\n_s2(Crown, \"kgEKvaZ2FyyF2u0NHLYoA6Sanss=\", false, function () {\n  return [useSize];\n});\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","UpdateButton","Info","useSize","jsxDEV","_jsxDEV","Fragment","_Fragment","Message","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","CLOSE_DEVICE","colors","generatePositions","numGroups","width","radius","Number","toFixed","originShift","console","log","positions","push","toString","theta","Math","PI","i","round","cos","sin","Crown","_s2","_s","$RefreshSig$","_deviceGroups$find","_deviceGroups$find2","thisDevice","setThisDevice","name","type","syncButtonColor","windowSize","connection","ws","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","onclose","onClose","deviceGroups","setDeviceGroups","id","color","devices","bubble","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","reduce","acc","newDevices","filter","message","data","readyState","OPEN","send","JSON","stringify","warn","event","parse","oldId","clipboard","newClipboard","d","updateClipboard","navigator","writeText","updateGroupClipboard","readText","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","className","children","outerDivClasses","some","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","spin","idx","iconId","top","left","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    let radius = width >= 768 ? 13 : Number(((13/35)*width/16).toFixed(2))\n    let originShift = width >= 768 ? 13.5 : Number(((11.5/35)*width/16).toFixed(2))\n    console.log(width,radius)\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\n\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const [thisDevice,setThisDevice] = useState({\n        name:\"Caraxes\",\n        type:\"\",\n        syncButtonColor:'green'\n    });\n\n    const windowSize = useSize();\n\n    const connection = useRef(null);\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:8080');\n        ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        ws.onclose = onClose;\n        connection.ws = ws\n    },[])\n\n    const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        console.log(newDeviceGroups)\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            console.log(newDeviceGroups)\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the device groups\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            deviceGroups.reduce((acc,group) => {\n                let newDevices = group.devices.filter(device => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n                return acc;\n            },[]);\n        });\n    };\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case Message.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type})\n                break;\n            case Message.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case Message.MERGE_GROUPS:\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case Message.UPDATE_CLIPBOARD:\n                connection.clipboard = message.newClipboard;\n                setThisDevice((d) => ({device:d.name,type:d.type,syncButtonColor:'red'}))\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n\n    // Updates Clipboard\n    async function updateClipboard() {\n        await navigator.clipboard.writeText(connection.clipboard)\n    }\n\n    // Updates Group Clipboard\n   async function updateGroupClipboard() {\n        const data = await navigator.clipboard.readText()\n        if (connection.clipboard !== data) {\n            connection.clipboard = data\n            const message = {clipboard:connection.clipboard}\n            this.sendMessage(Message.UPDATE_CLIPBOARD,message)\n        }\n    }\n    \n    // Handles WebSocket connection closure and removes the device\n    function onClose() {\n        // removeDevice(connection.name);\n        // let message = {name:connection.name};\n        // sendMessage(Message.CLOSE_DEVICE, message);\n    }\n\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(Message.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,windowSize[1]) : []\n    }, [deviceGroups,windowSize])\n\n    // Rendered JSX\n    return (\n        <div className='flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10'>\n            {windowSize[1] < 768 ? (\n                <>\n                <Info outerDivClasses='mx-auto order-1 scale-75' name={thisDevice.name} color={deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))?.color} type='E'/>\n                <div className='order-3 flex flex-row place-content-evenly ml-5' style={{marginTop:`${windowSize[1]+10}px`}}>\n                    <SyncButton outerDivClasses='mx-auto scale-75' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                    <UpdateButton outerDivClasses='mx-auto scale-75' onClick={updateGroupClipboard}/>\n                </div>\n                </>\n\n            ): (\n                <>\n                    <Info outerDivClasses='order-1 scale-75 md:scale-100' name={thisDevice.name} color={deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))?.color} type='E'/>\n                    <div className='order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0'>\n                        <SyncButton outerDivClasses='md:my-12' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                        <UpdateButton onClick={updateGroupClipboard}/>\n                    </div>\n                </>\n            )}\n    \n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length <= 1 : true} width={windowSize[1]}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}