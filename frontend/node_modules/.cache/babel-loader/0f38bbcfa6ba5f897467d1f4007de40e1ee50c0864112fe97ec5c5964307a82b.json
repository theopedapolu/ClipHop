{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Clock from './Clock';\nimport Message from './Message';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useDevices from './useDevices';\n\n// List of colors used for groups\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\nconst MessageType = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  ADD_GROUPS: 'Add Groups',\n  MERGE_GROUPS: 'Merge Groups',\n  UPDATE_CLIPBOARD: 'Update Clipboard',\n  GET_CLIPBOARD: 'Get Clipboard',\n  PING: 'Ping',\n  CLOSE_DEVICE: 'Close Device'\n});\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hooks & State\n  const {\n    thisDevice,\n    setThisDevice,\n    deviceGroups,\n    addGroups,\n    addDevice,\n    mergeGroups,\n    removeDevice\n  } = useDevices();\n  const connection = useRef({\n    ws: null,\n    clipboard: \"\",\n    id: 1\n  });\n  useEffect(() => {\n    connection.current.id = thisDevice.id;\n  }, [thisDevice]);\n  useEffect(() => {\n    const ws = new WebSocket(CLIPHOP_SERVER);\n    connection.current.ws = ws;\n    ws.onopen = () => {\n      sendMessage(MessageType.CONNECTION, {\n        text: \"Device connected successfully\"\n      });\n    };\n    ws.onmessage = handleMessage;\n    // const interval = setInterval(() => {sendMessage(MessageType.PING,{text:'heartbeat'})}, PING_INTERVAL)\n    // ws.onclose = () => {\n    //     clearInterval(interval)\n    //     ws.close()\n    //}\n  }, []);\n\n  // State Change Helper methods\n  // Updates Clipboard\n  async function updateClipboard() {\n    console.log('clipboard before', connection.current.clipboard);\n    await navigator.clipboard.writeText(connection.current.clipboard);\n    setThisDevice(d => ({\n      ...d,\n      syncButtonColor: 'green'\n    }));\n  }\n\n  // Updates Group Clipboard\n  async function updateGroupClipboard() {\n    try {\n      const data = await navigator.clipboard.readText();\n      console.log(connection.current.clipboard, data);\n      if (connection.current.clipboard !== data) {\n        connection.current.clipboard = data;\n        const message = {\n          groupId: connection.current.id,\n          clipboard: connection.current.clipboard\n        };\n        await sendMessage(MessageType.UPDATE_CLIPBOARD, message);\n        console.log(\"Updated clipboard message sent\", message);\n      }\n    } catch (err) {\n      console.error(\"Could not read clipboard\");\n    }\n  }\n\n  // Websocket handlers\n  async function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n      console.log('Sent Message', data);\n      connection.current.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not open. Cannot send message.');\n    }\n  }\n\n  // Handles incoming WebSocket messages and updates state accordingly\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    console.log(type, message);\n    switch (type) {\n      case MessageType.ADD_GROUPS:\n        addGroups(message.devices);\n        setThisDevice({\n          name: message.name,\n          type: message.type,\n          id: message.id,\n          syncButtonColor: 'green'\n        });\n        break;\n      case MessageType.ADD_DEVICE:\n        addDevice(message.groupId, message.name, message.type);\n        break;\n      case MessageType.MERGE_GROUPS:\n        if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n          connection.current.clipboard = message.newClipboard;\n          setThisDevice(d => ({\n            ...d,\n            id: message.newId,\n            syncButtonColor: 'red'\n          }));\n        }\n        mergeGroups(message.oldId, message.newId);\n        break;\n      case MessageType.UPDATE_CLIPBOARD:\n        if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n          connection.current.clipboard = message.newClipboard;\n          setThisDevice(d => ({\n            ...d,\n            syncButtonColor: 'red'\n          }));\n        }\n        break;\n      case MessageType.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n\n  // Drag & Drop event handlers\n  // Handles drag over events during drag-and-drop operations\n  function handleDragOver(event) {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n\n  // Handles the end of a drag event and merges groups if necessary\n  function handleDragEnd(event) {\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        oldId: event.active.id,\n        newId: event.over.id\n      };\n      sendMessage(MessageType.MERGE_GROUPS, message);\n    }\n  }\n\n  // Monitors drag-and-drop events\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  const getMessageDispatch = () => {\n    if (deviceGroups.filter(group => group.devices.length >= 2).length >= 1) {\n      return \"Click UPDATE to update the group's clipboard based on this device and SYNC to copy the updated clipboard onto this device\";\n    } else if (deviceGroups.length >= 2) {\n      return \"Drag and Drop devices onto each other to form clipboard sync groups\";\n    } else {\n      return \"Open ClipHop on another device to sync your clipboards\";\n    }\n  };\n\n  // Rendered JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"md:space-y-16\",\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      dispatch: getMessageDispatch()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col w-screen place-content-evenly place-items-center md:flex-row\",\n      children: [window.innerHeight / window.innerWidth >= 1.5 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          outerDivClasses: \"mx-auto order-1 scale-75\",\n          name: thisDevice.name,\n          color: colors[thisDevice.id - 1],\n          type: \"E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"order-3 flex flex-row place-content-evenly ml-5\",\n          style: {\n            marginTop: `${window.innerWidth + 10}px`\n          },\n          children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n            outerDivClasses: \"mx-auto scale-75\",\n            color: thisDevice.syncButtonColor,\n            onClick: updateClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n            outerDivClasses: \"mx-auto scale-75\",\n            onClick: updateGroupClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          outerDivClasses: \"order-1 scale-75 md:scale-100\",\n          name: thisDevice.name,\n          color: colors[thisDevice.id - 1],\n          type: \"E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0\",\n          children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n            outerDivClasses: \"md:my-12\",\n            color: thisDevice.syncButtonColor,\n            onClick: updateClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n            onClick: updateGroupClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          spin: deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1 : true,\n          width: window.innerWidth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n          children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this), deviceGroups && deviceGroups.map((group, idx) => {\n            return /*#__PURE__*/_jsxDEV(DndIcon, {\n              iconId: group.id,\n              top: positions[idx][0],\n              left: positions[idx][1],\n              bubble: group.bubble,\n              children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n                devices: group.devices,\n                color: group.color\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 21\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n_s2(Crown, \"RcRyFx08K2pl5ECZGG/b1kxiJ+M=\", false, function () {\n  return [useDevices];\n});\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","Message","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","UpdateButton","Info","useDevices","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","MessageType","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","PING","CLOSE_DEVICE","Crown","_s2","_s","$RefreshSig$","thisDevice","setThisDevice","deviceGroups","addGroups","addDevice","mergeGroups","removeDevice","connection","ws","clipboard","id","current","WebSocket","CLIPHOP_SERVER","onopen","sendMessage","text","onmessage","handleMessage","updateClipboard","console","log","navigator","writeText","d","syncButtonColor","updateGroupClipboard","data","readText","message","groupId","err","error","type","readyState","OPEN","send","JSON","stringify","warn","event","parse","devices","name","oldId","newClipboard","newId","handleDragOver","over","active","setDeviceGroups","map","group","color","bubble","length","handleDragEnd","Monitor","onDragOver","onDragEnd","getMessageDispatch","filter","className","children","dispatch","fileName","_jsxFileName","lineNumber","columnNumber","window","innerHeight","innerWidth","outerDivClasses","style","marginTop","onClick","spin","width","idx","iconId","top","positions","left","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport Message from './Message';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useDevices from './useDevices';\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\nconst MessageType = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    PING: 'Ping',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const {thisDevice,setThisDevice,deviceGroups,addGroups,addDevice,mergeGroups,removeDevice} = useDevices()\n    const connection = useRef({ws:null,clipboard:\"\",id:1});\n\n    useEffect(() => {\n        connection.current.id = thisDevice.id;\n    },[thisDevice])\n\n    useEffect(() => {\n        const ws = new WebSocket(CLIPHOP_SERVER);\n        connection.current.ws = ws\n        ws.onopen = () => {sendMessage(MessageType.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        // const interval = setInterval(() => {sendMessage(MessageType.PING,{text:'heartbeat'})}, PING_INTERVAL)\n        // ws.onclose = () => {\n        //     clearInterval(interval)\n        //     ws.close()\n        //}\n    },[])\n\n\n    // State Change Helper methods\n    // Updates Clipboard\n    async function updateClipboard() {\n        console.log('clipboard before',connection.current.clipboard)\n        await navigator.clipboard.writeText(connection.current.clipboard)\n        setThisDevice((d) => ({...d,syncButtonColor:'green'}))\n    }\n\n    // Updates Group Clipboard\n   async function updateGroupClipboard() {\n        try {\n            const data = await navigator.clipboard.readText()\n            console.log(connection.current.clipboard,data)\n            if (connection.current.clipboard !== data) {\n                connection.current.clipboard = data\n                const message = {groupId:connection.current.id,clipboard:connection.current.clipboard}\n                await sendMessage(MessageType.UPDATE_CLIPBOARD,message)\n                console.log(\"Updated clipboard message sent\",message)\n            }\n        } catch(err) {\n            console.error(\"Could not read clipboard\")\n        }\n    }\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.current.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case MessageType.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'})\n                break;\n            case MessageType.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case MessageType.MERGE_GROUPS:\n                if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,id:message.newId,syncButtonColor:'red'}))\n                }\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case MessageType.UPDATE_CLIPBOARD:\n                if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,syncButtonColor:'red'}))\n                }\n                break;\n            case MessageType.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n    \n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(MessageType.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n\n    const getMessageDispatch = () => {\n        if (deviceGroups.filter(group => group.devices.length >= 2).length >= 1) {\n            return \"Click UPDATE to update the group's clipboard based on this device and SYNC to copy the updated clipboard onto this device\"\n        } else if (deviceGroups.length >= 2) {\n            return \"Drag and Drop devices onto each other to form clipboard sync groups\"\n        } else {\n            return \"Open ClipHop on another device to sync your clipboards\"\n        }\n    }\n\n    // Rendered JSX\n    return (\n        <div className='md:space-y-16'>\n        <Message dispatch={getMessageDispatch()}/>\n        <div className='flex flex-col w-screen place-content-evenly place-items-center md:flex-row'>\n            {(window.innerHeight/window.innerWidth >= 1.5) ? (\n                <>\n                <Info outerDivClasses='mx-auto order-1 scale-75' name={thisDevice.name} color={colors[thisDevice.id-1]} type='E'/>\n                <div className='order-3 flex flex-row place-content-evenly ml-5' style={{marginTop:`${window.innerWidth+10}px`}}>\n                    <SyncButton outerDivClasses='mx-auto scale-75' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                    <UpdateButton outerDivClasses='mx-auto scale-75' onClick={updateGroupClipboard}/>\n                </div>\n                </>\n\n            ): (\n                <>\n                    <Info outerDivClasses='order-1 scale-75 md:scale-100' name={thisDevice.name} color={colors[thisDevice.id-1]} type='E'/>\n                    <div className='order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0'>\n                        <SyncButton outerDivClasses='md:my-12' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                        <UpdateButton onClick={updateGroupClipboard}/>\n                    </div>\n                </>\n            )}\n    \n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1: true} width={window.innerWidth}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}