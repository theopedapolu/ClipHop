{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Clock from './Clock';\nimport Message from './Message';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageType = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  ADD_GROUPS: 'Add Groups',\n  MERGE_GROUPS: 'Merge Groups',\n  UPDATE_CLIPBOARD: 'Update Clipboard',\n  GET_CLIPBOARD: 'Get Clipboard',\n  PING: 'Ping',\n  CLOSE_DEVICE: 'Close Device'\n});\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\n\n// Interver to send pings to server\nconst PING_INTERVAL = 10000;\n\n// ClipHop Server URL\nconst CLIPHOP_SERVER = 'wss://ws.cliphop.net:443';\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups, width) {\n  let radius = width >= 768 ? 13 : Number((13 / 35 * width / 16).toFixed(2));\n  let originShift = width >= 768 ? 13.5 : Number((11.5 / 35 * width / 16).toFixed(2));\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push([originShift.toString(), originShift.toString()]);\n  } else if (numGroups >= 1) {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + originShift).toString(), (originShift - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  return positions;\n}\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hooks & State\n  const [thisDevice, setThisDevice] = useState({\n    name: \"Caraxes\",\n    type: \"\",\n    id: 1,\n    syncButtonColor: 'green'\n  });\n  const [messageDispatch, setMessageDispatch] = useState(\"Open ClipHop on another device to sync your clipboards\");\n  const windowSize = useSize();\n  const connection = useRef({\n    ws: null,\n    clipboard: \"\",\n    id: 1\n  });\n  useEffect(() => {\n    connection.current.id = thisDevice.id;\n  }, [thisDevice]);\n  useEffect(() => {\n    const ws = new WebSocket(CLIPHOP_SERVER);\n    connection.current.ws = ws;\n    ws.onopen = () => {\n      sendMessage(MessageType.CONNECTION, {\n        text: \"Device connected successfully\"\n      });\n    };\n    ws.onmessage = handleMessage;\n    // const interval = setInterval(() => {sendMessage(MessageType.PING,{text:'heartbeat'})}, PING_INTERVAL)\n    // ws.onclose = () => {\n    //     clearInterval(interval)\n    //     ws.close()\n    //}\n  }, []);\n\n  // const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n  const [deviceGroups, setDeviceGroups] = useState([]);\n\n  // State Change Helper methods\n\n  // Adds new device groups based on the provided device list\n  const addGroups = deviceList => {\n    let newDeviceGroups = [];\n    let groupsMap = new Map();\n    let maxId = 0;\n    deviceList.forEach(device => {\n      if (!groupsMap.has(device.groupId)) {\n        groupsMap.set(device.groupId, []);\n      }\n      groupsMap.get(device.groupId).push({\n        name: device.name,\n        type: device.type\n      });\n      maxId = Math.max(maxId, device.groupId);\n    });\n    for (let i = 1; i <= maxId; ++i) {\n      if (groupsMap.has(i)) {\n        let groupDeviceList = groupsMap.get(i);\n        newDeviceGroups.push({\n          id: i,\n          color: colors[i - 1],\n          devices: groupDeviceList,\n          bubble: groupDeviceList.length > 1\n        });\n      }\n    }\n    setDeviceGroups(newDeviceGroups);\n  };\n\n  // Adds a new device to the device groups\n  const addDevice = (newId, name, type) => {\n    setDeviceGroups(deviceGroups => {\n      let newDeviceGroups = [...deviceGroups, {\n        id: newId,\n        color: colors[newId - 1],\n        devices: [{\n          name: name,\n          type: type\n        }],\n        bubble: false\n      }].sort((a, b) => a.id - b.id);\n      return newDeviceGroups;\n    });\n  };\n\n  // Merges two device groups into one\n  const mergeGroups = (id1, id2) => {\n    setDeviceGroups(deviceGroups => {\n      let updatedGroups = [];\n      for (let group of deviceGroups) {\n        if (group.id === id2) {\n          const group1 = deviceGroups.find(g => g.id === id1);\n          const mergedDevices = [...group.devices, ...group1.devices];\n          updatedGroups.push({\n            ...group,\n            devices: mergedDevices,\n            bubble: mergedDevices.length > 1\n          });\n        } else if (group.id !== id1) {\n          // Skip group id1 since it will be merged later\n          updatedGroups.push(group);\n        }\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Removes a device by name from the deviceGroups state\n  const removeDevice = name => {\n    setDeviceGroups(deviceGroups => {\n      let acc = [];\n      for (let group of deviceGroups) {\n        let newDevices = group.devices.filter(device => device.name !== name);\n        if (newDevices.length > 0) {\n          acc.push({\n            ...group,\n            devices: newDevices\n          });\n        }\n      }\n      return acc;\n    });\n  };\n\n  // Updates Clipboard\n  async function updateClipboard() {\n    console.log('clipboard before', connection.current.clipboard);\n    await navigator.clipboard.writeText(connection.current.clipboard);\n    setThisDevice(d => ({\n      ...d,\n      syncButtonColor: 'green'\n    }));\n  }\n\n  // Updates Group Clipboard\n  async function updateGroupClipboard() {\n    try {\n      const data = await navigator.clipboard.readText();\n      console.log(connection.current.clipboard, data);\n      if (connection.current.clipboard !== data) {\n        connection.current.clipboard = data;\n        const message = {\n          groupId: connection.current.id,\n          clipboard: connection.current.clipboard\n        };\n        await sendMessage(MessageType.UPDATE_CLIPBOARD, message);\n        console.log(\"Updated clipboard message sent\", message);\n      }\n    } catch (err) {\n      console.error(\"Could not read clipboard\");\n    }\n  }\n\n  // Websocket handlers\n  async function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n      console.log('Sent Message', data);\n      connection.current.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not open. Cannot send message.');\n    }\n  }\n\n  // Handles incoming WebSocket messages and updates state accordingly\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    console.log(type, message);\n    switch (type) {\n      case MessageType.ADD_GROUPS:\n        addGroups(message.devices);\n        setThisDevice({\n          name: message.name,\n          type: message.type,\n          id: message.id,\n          syncButtonColor: 'green'\n        });\n        break;\n      case MessageType.ADD_DEVICE:\n        addDevice(message.groupId, message.name, message.type);\n        break;\n      case MessageType.MERGE_GROUPS:\n        if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n          connection.current.clipboard = message.newClipboard;\n          setThisDevice(d => ({\n            ...d,\n            id: message.newId,\n            syncButtonColor: 'red'\n          }));\n        }\n        mergeGroups(message.oldId, message.newId);\n        break;\n      case MessageType.UPDATE_CLIPBOARD:\n        if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n          connection.current.clipboard = message.newClipboard;\n          setThisDevice(d => ({\n            ...d,\n            syncButtonColor: 'red'\n          }));\n        }\n        break;\n      case MessageType.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n\n  // Drag & Drop event handlers\n  // Handles drag over events during drag-and-drop operations\n  function handleDragOver(event) {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n\n  // Handles the end of a drag event and merges groups if necessary\n  function handleDragEnd(event) {\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        oldId: event.active.id,\n        newId: event.over.id\n      };\n      sendMessage(MessageType.MERGE_GROUPS, message);\n    }\n  }\n\n  // Monitors drag-and-drop events\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n\n  // Generates positions for the device groups based on their count\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  const positions = useMemo(() => {\n    return deviceGroups ? generatePositions(deviceGroups.length, windowSize[1]) : [];\n  }, [deviceGroups, windowSize]);\n\n  // Rendered JSX\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      dispatch: messageDispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10\",\n      children: [windowSize[1] < 768 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          outerDivClasses: \"mx-auto order-1 scale-75\",\n          name: thisDevice.name,\n          color: colors[thisDevice.id - 1],\n          type: \"E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"order-3 flex flex-row place-content-evenly ml-5\",\n          style: {\n            marginTop: `${windowSize[1] + 10}px`\n          },\n          children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n            outerDivClasses: \"mx-auto scale-75\",\n            color: thisDevice.syncButtonColor,\n            onClick: updateClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n            outerDivClasses: \"mx-auto scale-75\",\n            onClick: updateGroupClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          outerDivClasses: \"order-1 scale-75 md:scale-100\",\n          name: thisDevice.name,\n          color: colors[thisDevice.id - 1],\n          type: \"E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0\",\n          children: [/*#__PURE__*/_jsxDEV(SyncButton, {\n            outerDivClasses: \"md:my-12\",\n            color: thisDevice.syncButtonColor,\n            onClick: updateClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(UpdateButton, {\n            onClick: updateGroupClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          spin: deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1 : true,\n          width: windowSize[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n          children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this), deviceGroups && deviceGroups.map((group, idx) => {\n            return /*#__PURE__*/_jsxDEV(DndIcon, {\n              iconId: group.id,\n              top: positions[idx][0],\n              left: positions[idx][1],\n              bubble: group.bubble,\n              children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n                devices: group.devices,\n                color: group.color\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 21\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s2(Crown, \"u6mAi0suI/8vbQAQoAFoHXnD/4g=\", false, function () {\n  return [useSize];\n});\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","Message","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","UpdateButton","Info","useSize","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageType","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","PING","CLOSE_DEVICE","colors","PING_INTERVAL","CLIPHOP_SERVER","generatePositions","numGroups","width","radius","Number","toFixed","originShift","positions","push","toString","theta","Math","PI","i","round","cos","sin","Crown","_s2","_s","$RefreshSig$","thisDevice","setThisDevice","name","type","id","syncButtonColor","messageDispatch","setMessageDispatch","windowSize","connection","ws","clipboard","current","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","color","devices","bubble","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","acc","newDevices","filter","updateClipboard","console","log","navigator","writeText","d","updateGroupClipboard","data","readText","message","err","error","readyState","OPEN","send","JSON","stringify","warn","event","parse","oldId","newClipboard","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","children","dispatch","fileName","_jsxFileName","lineNumber","columnNumber","className","outerDivClasses","style","marginTop","onClick","spin","idx","iconId","top","left","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport Message from './Message';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\n\nconst MessageType = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    PING: 'Ping',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n// Interver to send pings to server\nconst PING_INTERVAL = 10000\n\n// ClipHop Server URL\nconst CLIPHOP_SERVER = 'wss://ws.cliphop.net:443';\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    let radius = width >= 768 ? 13 : Number(((13/35)*width/16).toFixed(2))\n    let originShift = width >= 768 ? 13.5 : Number(((11.5/35)*width/16).toFixed(2))\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const [thisDevice,setThisDevice] = useState({\n        name:\"Caraxes\",\n        type:\"\",\n        id:1,\n        syncButtonColor:'green'\n    });\n\n    const [messageDispatch,setMessageDispatch] = useState(\"Open ClipHop on another device to sync your clipboards\");\n\n    const windowSize = useSize();\n\n    const connection = useRef({ws:null,clipboard:\"\",id:1});\n\n    useEffect(() => {\n        connection.current.id = thisDevice.id;\n    },[thisDevice])\n\n    useEffect(() => {\n        const ws = new WebSocket(CLIPHOP_SERVER);\n        connection.current.ws = ws\n        ws.onopen = () => {sendMessage(MessageType.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        // const interval = setInterval(() => {sendMessage(MessageType.PING,{text:'heartbeat'})}, PING_INTERVAL)\n        // ws.onclose = () => {\n        //     clearInterval(interval)\n        //     ws.close()\n        //}\n    },[])\n\n    // const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n    const [deviceGroups, setDeviceGroups] = useState([])\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the deviceGroups state\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            let acc = []\n            for (let group of deviceGroups) {\n                let newDevices = group.devices.filter((device) => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n            }\n            return acc\n        });\n    };\n\n    // Updates Clipboard\n    async function updateClipboard() {\n        console.log('clipboard before',connection.current.clipboard)\n        await navigator.clipboard.writeText(connection.current.clipboard)\n        setThisDevice((d) => ({...d,syncButtonColor:'green'}))\n    }\n\n    // Updates Group Clipboard\n   async function updateGroupClipboard() {\n        try {\n            const data = await navigator.clipboard.readText()\n            console.log(connection.current.clipboard,data)\n            if (connection.current.clipboard !== data) {\n                connection.current.clipboard = data\n                const message = {groupId:connection.current.id,clipboard:connection.current.clipboard}\n                await sendMessage(MessageType.UPDATE_CLIPBOARD,message)\n                console.log(\"Updated clipboard message sent\",message)\n            }\n        } catch(err) {\n            console.error(\"Could not read clipboard\")\n        }\n    }\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.current.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case MessageType.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'})\n                break;\n            case MessageType.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case MessageType.MERGE_GROUPS:\n                if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,id:message.newId,syncButtonColor:'red'}))\n                }\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case MessageType.UPDATE_CLIPBOARD:\n                if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,syncButtonColor:'red'}))\n                }\n                break;\n            case MessageType.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(MessageType.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,windowSize[1]) : []\n    }, [deviceGroups,windowSize])\n\n    // Rendered JSX\n    return (\n        <>\n        <Message dispatch={messageDispatch}/>\n        <div className='flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10'>\n            {windowSize[1] < 768 ? (\n                <>\n                <Info outerDivClasses='mx-auto order-1 scale-75' name={thisDevice.name} color={colors[thisDevice.id-1]} type='E'/>\n                <div className='order-3 flex flex-row place-content-evenly ml-5' style={{marginTop:`${windowSize[1]+10}px`}}>\n                    <SyncButton outerDivClasses='mx-auto scale-75' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                    <UpdateButton outerDivClasses='mx-auto scale-75' onClick={updateGroupClipboard}/>\n                </div>\n                </>\n\n            ): (\n                <>\n                    <Info outerDivClasses='order-1 scale-75 md:scale-100' name={thisDevice.name} color={colors[thisDevice.id-1]} type='E'/>\n                    <div className='order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0'>\n                        <SyncButton outerDivClasses='md:my-12' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                        <UpdateButton onClick={updateGroupClipboard}/>\n                    </div>\n                </>\n            )}\n    \n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1: true} width={windowSize[1]}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}