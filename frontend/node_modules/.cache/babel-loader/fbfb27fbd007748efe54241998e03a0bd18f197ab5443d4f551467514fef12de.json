{"ast":null,"code":"import React,{useEffect,useState,useRef,useMemo}from'react';import Clock from'./Clock';import DeviceGroup from'./DeviceGroup';import{DndContext,useDndMonitor}from'@dnd-kit/core';import DndIcon from'./DnDIcon';import SyncButton from'./SyncButton';import UpdateButton from'./UpdateButton';import Info from'./Info';import useSize from'./useSize';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Message=Object.freeze({CONNECTION:'Connection',ADD_DEVICE:'Add Device',ADD_GROUPS:'Add Groups',MERGE_GROUPS:'Merge Groups',UPDATE_CLIPBOARD:'Update Clipboard',GET_CLIPBOARD:'Get Clipboard',PING:'Ping',CLOSE_DEVICE:'Close Device'});// List of colors used for groups\nconst colors=['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];// Interver to send pings to server\nconst PING_INTERVAL=10000;// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width){let radius=width>=768?13:Number((13/35*width/16).toFixed(2));let originShift=width>=768?13.5:Number((11.5/35*width/16).toFixed(2));let positions=[];if(numGroups===1){positions.push([originShift.toString(),originShift.toString()]);}else if(numGroups>=1){let theta=2*Math.PI/numGroups;for(let i=0;i<numGroups;++i){positions.push([(Math.round(radius*Math.cos(i*theta))+originShift).toString(),(originShift-Math.round(radius*Math.sin(i*theta))).toString()]);}}return positions;}// Main component for managing device groups and WebSocket connection\nfunction Crown(){// Hooks & State\nconst[thisDevice,setThisDevice]=useState({name:\"Caraxes\",type:\"\",id:1,syncButtonColor:'green'});const windowSize=useSize();const connection=useRef({ws:null,clipboard:\"\",id:1});useEffect(()=>{connection.current.id=thisDevice.id;},[thisDevice]);useEffect(()=>{const ws=new WebSocket('ws://localhost:8080');connection.current.ws=ws;ws.onopen=()=>{sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"});};ws.onmessage=handleMessage;const interval=setInterval(()=>{sendMessage(Message.PING,{text:'heartbeat'});},PING_INTERVAL);ws.onclose=()=>{clearInterval(interval);ws.close();};},[]);// const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\nconst[deviceGroups,setDeviceGroups]=useState([]);// State Change Helper methods\n// Adds new device groups based on the provided device list\nconst addGroups=deviceList=>{let newDeviceGroups=[];let groupsMap=new Map();let maxId=0;deviceList.forEach(device=>{if(!groupsMap.has(device.groupId)){groupsMap.set(device.groupId,[]);}groupsMap.get(device.groupId).push({name:device.name,type:device.type});maxId=Math.max(maxId,device.groupId);});for(let i=1;i<=maxId;++i){if(groupsMap.has(i)){let groupDeviceList=groupsMap.get(i);newDeviceGroups.push({id:i,color:colors[i-1],devices:groupDeviceList,bubble:groupDeviceList.length>1});}}setDeviceGroups(newDeviceGroups);};// Adds a new device to the device groups\nconst addDevice=(newId,name,type)=>{setDeviceGroups(deviceGroups=>{let newDeviceGroups=[...deviceGroups,{id:newId,color:colors[newId-1],devices:[{name:name,type:type}],bubble:false}].sort((a,b)=>a.id-b.id);return newDeviceGroups;});};// Merges two device groups into one\nconst mergeGroups=(id1,id2)=>{setDeviceGroups(deviceGroups=>{let updatedGroups=[];for(let group of deviceGroups){if(group.id===id2){const group1=deviceGroups.find(g=>g.id===id1);const mergedDevices=[...group.devices,...group1.devices];updatedGroups.push({...group,devices:mergedDevices,bubble:mergedDevices.length>1});}else if(group.id!==id1){// Skip group id1 since it will be merged later\nupdatedGroups.push(group);}}return updatedGroups;});};// Removes a device by name from the deviceGroups state\nconst removeDevice=name=>{setDeviceGroups(deviceGroups=>{let acc=[];for(let group of deviceGroups){let newDevices=group.devices.filter(device=>device.name!==name);if(newDevices.length>0){acc.push({...group,devices:newDevices});}}return acc;});};// Updates Clipboard\nasync function updateClipboard(){console.log('clipboard before',connection.current.clipboard);await navigator.clipboard.writeText(connection.current.clipboard);setThisDevice(d=>({...d,syncButtonColor:'green'}));}// Updates Group Clipboard\nasync function updateGroupClipboard(){try{const data=await navigator.clipboard.readText();console.log(connection.current.clipboard,data);if(connection.current.clipboard!==data){connection.current.clipboard=data;const message={groupId:connection.current.id,clipboard:connection.current.clipboard};await sendMessage(Message.UPDATE_CLIPBOARD,message);console.log(\"Updated clipboard message sent\",message);}}catch(err){console.error(\"Could not read clipboard\");}}// Websocket handlers\nasync function sendMessage(type,message){const data={type,message};if(connection.current.ws&&connection.current.ws.readyState===WebSocket.OPEN){console.log('Sent Message',data);connection.current.ws.send(JSON.stringify(data));}else{console.warn('WebSocket is not open. Cannot send message.');}}// Handles incoming WebSocket messages and updates state accordingly\nfunction handleMessage(event){const{type,message}=JSON.parse(event.data);console.log(type,message);switch(type){case Message.ADD_GROUPS:addGroups(message.devices);setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'});break;case Message.ADD_DEVICE:addDevice(message.groupId,message.name,message.type);break;case Message.MERGE_GROUPS:if(connection.current.id===message.oldId&&connection.current.clipboard!==message.newClipboard){connection.current.clipboard=message.newClipboard;setThisDevice(d=>({...d,id:message.newId,syncButtonColor:'red'}));}mergeGroups(message.oldId,message.newId);break;case Message.UPDATE_CLIPBOARD:if(connection.id===message.groupId&&connection.current.clipboard!==message.newClipboard){connection.current.clipboard=message.newClipboard;setThisDevice(d=>({...d,syncButtonColor:'red'}));}break;case Message.CLOSE_DEVICE:removeDevice(message.name);break;default:console.warn(\"Unhandled message type: \".concat(type));}}// Drag & Drop event handlers\n// Handles drag over events during drag-and-drop operations\nfunction handleDragOver(event){if(event.over==null||event.over.id===event.active.id){setDeviceGroups(deviceGroups.map(group=>{return{...group,color:colors[group.id-1],bubble:group.devices.length>1};}));}else{setDeviceGroups(deviceGroups.map(group=>{if(group.id===event.active.id){return{...group,color:colors[event.over.id-1],bubble:group.devices.length>1};}else if(group.id===event.over.id){return{...group,color:colors[event.over.id-1],bubble:true};}else{return{...group,color:colors[group.id-1],bubble:group.devices.length>1};}}));}}// Handles the end of a drag event and merges groups if necessary\nfunction handleDragEnd(event){if(event.over!==null&&event.over.id!==event.active.id){mergeGroups(event.active.id,event.over.id);let message={oldId:event.active.id,newId:event.over.id};sendMessage(Message.MERGE_GROUPS,message);}}// Monitors drag-and-drop events\nfunction Monitor(){useDndMonitor({onDragOver(event){handleDragOver(event);},onDragEnd(event){handleDragEnd(event);}});}// Generates positions for the device groups based on their count\nconst positions=useMemo(()=>{return deviceGroups?generatePositions(deviceGroups.length,windowSize[1]):[];},[deviceGroups,windowSize]);// Rendered JSX\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10\",children:[windowSize[1]<768?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Info,{outerDivClasses:\"mx-auto order-1 scale-75\",name:thisDevice.name,color:colors[thisDevice.id-1],type:\"E\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"order-3 flex flex-row place-content-evenly ml-5\",style:{marginTop:\"\".concat(windowSize[1]+10,\"px\")},children:[/*#__PURE__*/_jsx(SyncButton,{outerDivClasses:\"mx-auto scale-75\",color:thisDevice.syncButtonColor,onClick:updateClipboard}),/*#__PURE__*/_jsx(UpdateButton,{outerDivClasses:\"mx-auto scale-75\",onClick:updateGroupClipboard})]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Info,{outerDivClasses:\"order-1 scale-75 md:scale-100\",name:thisDevice.name+thisDevice.id,color:colors[thisDevice.id-1],type:\"E\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0\",children:[/*#__PURE__*/_jsx(SyncButton,{outerDivClasses:\"md:my-12\",color:thisDevice.syncButtonColor,onClick:updateClipboard}),/*#__PURE__*/_jsx(UpdateButton,{onClick:updateGroupClipboard})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",children:[/*#__PURE__*/_jsx(Clock,{spin:deviceGroups?deviceGroups.length===1&&deviceGroups[0].devices.length===1:true,width:windowSize[1]}),/*#__PURE__*/_jsxs(DndContext,{children:[/*#__PURE__*/_jsx(Monitor,{}),deviceGroups&&deviceGroups.map((group,idx)=>{return/*#__PURE__*/_jsx(DndIcon,{iconId:group.id,top:positions[idx][0],left:positions[idx][1],bubble:group.bubble,children:/*#__PURE__*/_jsx(DeviceGroup,{devices:group.devices,color:group.color})},idx);})]})]})]});}export default Crown;","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","UpdateButton","Info","useSize","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Message","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","PING","CLOSE_DEVICE","colors","PING_INTERVAL","generatePositions","numGroups","width","radius","Number","toFixed","originShift","positions","push","toString","theta","Math","PI","i","round","cos","sin","Crown","thisDevice","setThisDevice","name","type","id","syncButtonColor","windowSize","connection","ws","clipboard","current","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","interval","setInterval","onclose","clearInterval","close","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","color","devices","bubble","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","acc","newDevices","filter","updateClipboard","console","log","navigator","writeText","d","updateGroupClipboard","data","readText","message","err","error","readyState","OPEN","send","JSON","stringify","warn","event","parse","oldId","newClipboard","concat","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","className","children","outerDivClasses","style","marginTop","onClick","spin","idx","iconId","top","left"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useSize from './useSize';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    PING: 'Ping',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n// Interver to send pings to server\nconst PING_INTERVAL = 10000\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    let radius = width >= 768 ? 13 : Number(((13/35)*width/16).toFixed(2))\n    let originShift = width >= 768 ? 13.5 : Number(((11.5/35)*width/16).toFixed(2))\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const [thisDevice,setThisDevice] = useState({\n        name:\"Caraxes\",\n        type:\"\",\n        id:1,\n        syncButtonColor:'green'\n    });\n\n    const windowSize = useSize();\n\n    const connection = useRef({ws:null,clipboard:\"\",id:1});\n\n    useEffect(() => {\n        connection.current.id = thisDevice.id;\n    },[thisDevice])\n\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:8080');\n        connection.current.ws = ws\n        ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        const interval = setInterval(() => {sendMessage(Message.PING,{text:'heartbeat'})}, PING_INTERVAL)\n        ws.onclose = () => {\n            clearInterval(interval)\n            ws.close()\n        }\n    },[])\n\n    // const [deviceGroups, setDeviceGroups] = useState([{id:1, color:colors[0], devices:[{name:\"Vermithor\",type:'A'}], bubble:false}]);\n    const [deviceGroups, setDeviceGroups] = useState([])\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the deviceGroups state\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            let acc = []\n            for (let group of deviceGroups) {\n                let newDevices = group.devices.filter((device) => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n            }\n            return acc\n        });\n    };\n\n    // Updates Clipboard\n    async function updateClipboard() {\n        console.log('clipboard before',connection.current.clipboard)\n        await navigator.clipboard.writeText(connection.current.clipboard)\n        setThisDevice((d) => ({...d,syncButtonColor:'green'}))\n    }\n\n    // Updates Group Clipboard\n   async function updateGroupClipboard() {\n        try {\n            const data = await navigator.clipboard.readText()\n            console.log(connection.current.clipboard,data)\n            if (connection.current.clipboard !== data) {\n                connection.current.clipboard = data\n                const message = {groupId:connection.current.id,clipboard:connection.current.clipboard}\n                await sendMessage(Message.UPDATE_CLIPBOARD,message)\n                console.log(\"Updated clipboard message sent\",message)\n            }\n        } catch(err) {\n            console.error(\"Could not read clipboard\")\n        }\n    }\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.current.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case Message.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'})\n                break;\n            case Message.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case Message.MERGE_GROUPS:\n                if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,id:message.newId,syncButtonColor:'red'}))\n                }\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case Message.UPDATE_CLIPBOARD:\n                if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,syncButtonColor:'red'}))\n                }\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(Message.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,windowSize[1]) : []\n    }, [deviceGroups,windowSize])\n\n    // Rendered JSX\n    return (\n        <div className='flex flex-col place-content-evenly place-items-center md:flex-row md:mt-10'>\n            {windowSize[1] < 768 ? (\n                <>\n                <Info outerDivClasses='mx-auto order-1 scale-75' name={thisDevice.name} color={colors[thisDevice.id-1]} type='E'/>\n                <div className='order-3 flex flex-row place-content-evenly ml-5' style={{marginTop:`${windowSize[1]+10}px`}}>\n                    <SyncButton outerDivClasses='mx-auto scale-75' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                    <UpdateButton outerDivClasses='mx-auto scale-75' onClick={updateGroupClipboard}/>\n                </div>\n                </>\n\n            ): (\n                <>\n                    <Info outerDivClasses='order-1 scale-75 md:scale-100' name={thisDevice.name+thisDevice.id} color={colors[thisDevice.id-1]} type='E'/>\n                    <div className='order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0'>\n                        <SyncButton outerDivClasses='md:my-12' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                        <UpdateButton onClick={updateGroupClipboard}/>\n                    </div>\n                </>\n            )}\n    \n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1: true} width={windowSize[1]}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}