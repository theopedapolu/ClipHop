{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo } from \"react\";\n// List of colors used for groups\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups, width) {\n  let radius = width >= 768 ? 13 : Number((13.5 / 35 * width / 16).toFixed(2));\n  let originShift = width >= 768 ? 13.5 : Number((10 / 35 * width / 16).toFixed(2));\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push([originShift.toString(), originShift.toString()]);\n  } else if (numGroups >= 1) {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + originShift).toString(), (originShift - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  return positions;\n}\nfunction useDevices() {\n  _s();\n  const [thisDevice, setThisDevice] = useState({\n    name: \"\",\n    type: \"\",\n    id: 1,\n    syncButtonColor: 'green'\n  });\n  const [deviceGroups, setDeviceGroups] = useState([]);\n\n  /*\n      deviceGroups state handlers\n  */\n  // Adds new device groups based on the provided device list\n  const addGroups = deviceList => {\n    let newDeviceGroups = [];\n    let groupsMap = new Map();\n    let maxId = 0;\n    deviceList.forEach(device => {\n      if (!groupsMap.has(device.groupId)) {\n        groupsMap.set(device.groupId, []);\n      }\n      groupsMap.get(device.groupId).push({\n        name: device.name,\n        type: device.type\n      });\n      maxId = Math.max(maxId, device.groupId);\n    });\n    for (let i = 1; i <= maxId; ++i) {\n      if (groupsMap.has(i)) {\n        let groupDeviceList = groupsMap.get(i);\n        newDeviceGroups.push({\n          id: i,\n          color: colors[i - 1],\n          devices: groupDeviceList,\n          bubble: groupDeviceList.length > 1\n        });\n      }\n    }\n    setDeviceGroups(newDeviceGroups);\n  };\n\n  // Adds a new device to the device groups\n  const addDevice = (newId, name, type) => {\n    setDeviceGroups(deviceGroups => {\n      let newDeviceGroups = [...deviceGroups, {\n        id: newId,\n        color: colors[newId - 1],\n        devices: [{\n          name: name,\n          type: type\n        }],\n        bubble: false\n      }].sort((a, b) => a.id - b.id);\n      return newDeviceGroups;\n    });\n  };\n\n  // Merges two device groups into one\n  const mergeGroups = (id1, id2) => {\n    setDeviceGroups(deviceGroups => {\n      let updatedGroups = [];\n      for (let group of deviceGroups) {\n        if (group.id === id2) {\n          const group1 = deviceGroups.find(g => g.id === id1);\n          const mergedDevices = [...group.devices, ...group1.devices];\n          updatedGroups.push({\n            ...group,\n            devices: mergedDevices,\n            bubble: mergedDevices.length > 1\n          });\n        } else if (group.id !== id1) {\n          // Skip group id1 since it will be merged later\n          updatedGroups.push(group);\n        }\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Removes a device by name from the deviceGroups state\n  const removeDevice = name => {\n    setDeviceGroups(deviceGroups => {\n      let acc = [];\n      for (let group of deviceGroups) {\n        let newDevices = group.devices.filter(device => device.name !== name);\n        if (newDevices.length > 0) {\n          acc.push({\n            ...group,\n            devices: newDevices\n          });\n        }\n      }\n      return acc;\n    });\n  };\n  const deviceDragOver = event => {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  };\n\n  // Generates positions for the device groups based on their count\n  const positions = useMemo(() => {\n    return deviceGroups ? generatePositions(deviceGroups.length, window.innerWidth) : [];\n  }, [deviceGroups]);\n  return {\n    thisDevice,\n    setThisDevice,\n    deviceGroups,\n    addGroups,\n    addDevice,\n    mergeGroups,\n    removeDevice,\n    deviceDragOver,\n    positions\n  };\n}\n_s(useDevices, \"ms/ItA4yHLxm8iZJ0r84LkObh8Y=\");\nexport default useDevices;","map":{"version":3,"names":["useState","useMemo","colors","generatePositions","numGroups","width","radius","Number","toFixed","originShift","positions","push","toString","theta","Math","PI","i","round","cos","sin","useDevices","_s","thisDevice","setThisDevice","name","type","id","syncButtonColor","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","color","devices","bubble","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","acc","newDevices","filter","deviceDragOver","event","over","active","map","window","innerWidth"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/useDevices.js"],"sourcesContent":["import {useState, useMemo} from \"react\";\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,width) {\n    let radius = width >= 768 ? 13 : Number(((13.5/35)*width/16).toFixed(2))\n    let originShift = width >= 768 ? 13.5 : Number(((10/35)*width/16).toFixed(2))\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([originShift.toString(),originShift.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + originShift).toString(),\n                (originShift-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\nfunction useDevices() {\n    const [thisDevice,setThisDevice] = useState({\n        name:\"\",\n        type:\"\",\n        id:1,\n        syncButtonColor:'green'\n    });\n    const [deviceGroups, setDeviceGroups] = useState([])\n\n    /*\n        deviceGroups state handlers\n    */\n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the deviceGroups state\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            let acc = []\n            for (let group of deviceGroups) {\n                let newDevices = group.devices.filter((device) => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n            }\n            return acc\n        });\n    }\n\n    const deviceDragOver = (event) => {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,window.innerWidth) : []\n    }, [deviceGroups])\n\n\n    return {thisDevice,setThisDevice,deviceGroups,addGroups,addDevice,mergeGroups,removeDevice,deviceDragOver,positions}\n}\n\nexport default useDevices"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}