{"ast":null,"code":"import React,{useEffect,useRef}from'react';import Clock from'./Clock';import Message from'./Message';import DeviceGroup from'./DeviceGroup';import{DndContext,useDndMonitor}from'@dnd-kit/core';import DndIcon from'./DnDIcon';import SyncButton from'./SyncButton';import UpdateButton from'./UpdateButton';import Info from'./Info';import useDevices from'./useDevices';// List of colors used for groups\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const colors=['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];// ClipHop Server URL\n// const CLIPHOP_SERVER = 'wss://ws.cliphop.net'\nconst CLIPHOP_SERVER='ws://localhost:8080';const MessageType=Object.freeze({CONNECTION:'Connection',ADD_DEVICE:'Add Device',ADD_GROUPS:'Add Groups',MERGE_GROUPS:'Merge Groups',UPDATE_CLIPBOARD:'Update Clipboard',GET_CLIPBOARD:'Get Clipboard',PING:'Ping',CLOSE_DEVICE:'Close Device'});// Main component for managing device groups and WebSocket connection\nfunction Crown(){// Hooks & State\nconst{thisDevice,setThisDevice,deviceGroups,addGroups,addDevice,mergeGroups,removeDevice,deviceDragOver,positions}=useDevices();const connection=useRef({ws:null,clipboard:\"\",id:1});useEffect(()=>{connection.current.id=thisDevice.id;},[thisDevice]);useEffect(()=>{const ws=new WebSocket(CLIPHOP_SERVER);connection.current.ws=ws;ws.onopen=()=>{sendMessage(MessageType.CONNECTION,{text:\"Device connected successfully\"});};ws.onmessage=handleMessage;// const interval = setInterval(() => {sendMessage(MessageType.PING,{text:'heartbeat'})}, PING_INTERVAL)\n// ws.onclose = () => {\n//     clearInterval(interval)\n//     ws.close()\n//}\n},[]);// State Change Helper methods\n// Updates Clipboard\nasync function updateClipboard(){console.log('clipboard before',connection.current.clipboard);await navigator.clipboard.writeText(connection.current.clipboard);setThisDevice(d=>({...d,syncButtonColor:'green'}));}// Updates Group Clipboard\nasync function updateGroupClipboard(){try{const data=await navigator.clipboard.readText();console.log(connection.current.clipboard,data);if(connection.current.clipboard!==data){connection.current.clipboard=data;const message={groupId:connection.current.id,clipboard:connection.current.clipboard};await sendMessage(MessageType.UPDATE_CLIPBOARD,message);console.log(\"Updated clipboard message sent\",message);}}catch(err){console.error(\"Could not read clipboard\");}}// Websocket handlers\nasync function sendMessage(type,message){const data={type,message};if(connection.current.ws&&connection.current.ws.readyState===WebSocket.OPEN){console.log('Sent Message',data);connection.current.ws.send(JSON.stringify(data));}else{console.warn('WebSocket is not open. Cannot send message.');}}// Handles incoming WebSocket messages and updates state accordingly\nfunction handleMessage(event){const{type,message}=JSON.parse(event.data);console.log(type,message);switch(type){case MessageType.ADD_GROUPS:addGroups(message.devices);setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'});break;case MessageType.ADD_DEVICE:addDevice(message.groupId,message.name,message.type);break;case MessageType.MERGE_GROUPS:if(connection.current.id===message.oldId&&connection.current.clipboard!==message.newClipboard){connection.current.clipboard=message.newClipboard;setThisDevice(d=>({...d,id:message.newId,syncButtonColor:'red'}));}mergeGroups(message.oldId,message.newId);break;case MessageType.UPDATE_CLIPBOARD:if(connection.id===message.groupId&&connection.current.clipboard!==message.newClipboard){connection.current.clipboard=message.newClipboard;setThisDevice(d=>({...d,syncButtonColor:'red'}));}break;case MessageType.CLOSE_DEVICE:removeDevice(message.name);break;default:console.warn(\"Unhandled message type: \".concat(type));}}// Drag & Drop event handlers\n// Handles drag over events during drag-and-drop operations\nfunction handleDragOver(event){deviceDragOver(event);}// Handles the end of a drag event and merges groups if necessary\nfunction handleDragEnd(event){if(event.over!==null&&event.over.id!==event.active.id){mergeGroups(event.active.id,event.over.id);let message={oldId:event.active.id,newId:event.over.id};sendMessage(MessageType.MERGE_GROUPS,message);}}// Monitors drag-and-drop events\nfunction Monitor(){useDndMonitor({onDragOver(event){handleDragOver(event);},onDragEnd(event){handleDragEnd(event);}});}const getMessageDispatch=()=>{if(deviceGroups.filter(group=>group.devices.length>=2).length>=1){return window.innerWidth<=768?\"Click UPDATE to update the group's clipboard based on this device and SYNC to copy the updated clipboard onto this device\":/*#__PURE__*/_jsxs(\"p\",{children:[\"Click UPDATE to update the group's clipboard based on this device\",/*#__PURE__*/_jsx(\"br\",{}),\"Click SYNC to copy the updated clipboard onto this device\"]});}else if(deviceGroups.length>=2){return\"Drag and Drop devices onto each other to form clipboard sync groups\";}else{return\"Open ClipHop on another device to sync your clipboards\";}};// Rendered JSX\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"md:space-y-16\",children:[/*#__PURE__*/_jsx(Message,{dispatch:getMessageDispatch()}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col w-screen place-content-evenly place-items-center md:flex-row\",children:[window.innerWidth<=768?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Info,{outerDivClasses:\"mx-auto order-1 scale-75\",name:thisDevice.name,color:colors[thisDevice.id-1],type:thisDevice.type?thisDevice.type:'Mac'}),/*#__PURE__*/_jsxs(\"div\",{className:\"order-3 flex flex-row place-content-evenly ml-5\",style:{marginTop:\"\".concat(window.innerWidth+10,\"px\")},children:[/*#__PURE__*/_jsx(SyncButton,{outerDivClasses:\"mx-auto scale-75\",color:thisDevice.syncButtonColor,onClick:updateClipboard}),/*#__PURE__*/_jsx(UpdateButton,{outerDivClasses:\"mx-auto scale-75\",onClick:updateGroupClipboard})]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Info,{outerDivClasses:\"order-1 scale-75 md:scale-100\",name:thisDevice.name,color:colors[thisDevice.id-1],type:thisDevice.type?thisDevice.type:'Mac'}),/*#__PURE__*/_jsxs(\"div\",{className:\"order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0\",children:[/*#__PURE__*/_jsx(SyncButton,{outerDivClasses:\"md:my-12\",color:thisDevice.syncButtonColor,onClick:updateClipboard}),/*#__PURE__*/_jsx(UpdateButton,{onClick:updateGroupClipboard})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relative order-2 w-screen md:w-[35rem] md:h-[35rem]\",children:[/*#__PURE__*/_jsx(Clock,{spin:deviceGroups?deviceGroups.length===1&&deviceGroups[0].devices.length===1:true,width:window.innerWidth}),/*#__PURE__*/_jsxs(DndContext,{children:[/*#__PURE__*/_jsx(Monitor,{}),deviceGroups&&deviceGroups.map((group,idx)=>{return/*#__PURE__*/_jsx(DndIcon,{iconId:group.id,top:positions[idx][0],left:positions[idx][1],bubble:group.devices.length>1,children:/*#__PURE__*/_jsx(DeviceGroup,{devices:group.devices,color:group.color})},idx);})]})]})]})]});}export default Crown;","map":{"version":3,"names":["React","useEffect","useRef","Clock","Message","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","UpdateButton","Info","useDevices","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","colors","CLIPHOP_SERVER","MessageType","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","PING","CLOSE_DEVICE","Crown","thisDevice","setThisDevice","deviceGroups","addGroups","addDevice","mergeGroups","removeDevice","deviceDragOver","positions","connection","ws","clipboard","id","current","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","updateClipboard","console","log","navigator","writeText","d","syncButtonColor","updateGroupClipboard","data","readText","message","groupId","err","error","type","readyState","OPEN","send","JSON","stringify","warn","event","parse","devices","name","oldId","newClipboard","newId","concat","handleDragOver","handleDragEnd","over","active","Monitor","onDragOver","onDragEnd","getMessageDispatch","filter","group","length","window","innerWidth","children","className","dispatch","outerDivClasses","color","style","marginTop","onClick","spin","width","map","idx","iconId","top","left","bubble"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport Clock from './Clock';\nimport Message from './Message';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport UpdateButton from './UpdateButton';\nimport Info from './Info';\nimport useDevices from './useDevices';\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n// ClipHop Server URL\n// const CLIPHOP_SERVER = 'wss://ws.cliphop.net'\nconst CLIPHOP_SERVER = 'ws://localhost:8080'\n\nconst MessageType = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    PING: 'Ping',\n    CLOSE_DEVICE: 'Close Device'\n})\n  \n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const {thisDevice,setThisDevice,deviceGroups,addGroups,addDevice,mergeGroups,removeDevice,deviceDragOver,positions} = useDevices()\n    const connection = useRef({ws:null,clipboard:\"\",id:1});\n\n    useEffect(() => {\n        connection.current.id = thisDevice.id;\n    },[thisDevice])\n\n    useEffect(() => {\n        const ws = new WebSocket(CLIPHOP_SERVER);\n        connection.current.ws = ws\n        ws.onopen = () => {sendMessage(MessageType.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        // const interval = setInterval(() => {sendMessage(MessageType.PING,{text:'heartbeat'})}, PING_INTERVAL)\n        // ws.onclose = () => {\n        //     clearInterval(interval)\n        //     ws.close()\n        //}\n    },[])\n\n\n    // State Change Helper methods\n    // Updates Clipboard\n    async function updateClipboard() {\n        console.log('clipboard before',connection.current.clipboard)\n        await navigator.clipboard.writeText(connection.current.clipboard)\n        setThisDevice((d) => ({...d,syncButtonColor:'green'}))\n    }\n\n    // Updates Group Clipboard\n   async function updateGroupClipboard() {\n        try {\n            const data = await navigator.clipboard.readText()\n            console.log(connection.current.clipboard,data)\n            if (connection.current.clipboard !== data) {\n                connection.current.clipboard = data\n                const message = {groupId:connection.current.id,clipboard:connection.current.clipboard}\n                await sendMessage(MessageType.UPDATE_CLIPBOARD,message)\n                console.log(\"Updated clipboard message sent\",message)\n            }\n        } catch(err) {\n            console.error(\"Could not read clipboard\")\n        }\n    }\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.current.ws && connection.current.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.current.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case MessageType.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type,id:message.id,syncButtonColor:'green'})\n                break;\n            case MessageType.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case MessageType.MERGE_GROUPS:\n                if (connection.current.id === message.oldId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,id:message.newId,syncButtonColor:'red'}))\n                }\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case MessageType.UPDATE_CLIPBOARD:\n                if (connection.id === message.groupId && connection.current.clipboard !== message.newClipboard) {\n                    connection.current.clipboard = message.newClipboard;\n                    setThisDevice((d) => ({...d,syncButtonColor:'red'}))\n                }\n                break;\n            case MessageType.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        deviceDragOver(event)\n    }\n    \n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(MessageType.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n\n    const getMessageDispatch = () => {\n        if (deviceGroups.filter(group => group.devices.length >= 2).length >= 1) {\n            return window.innerWidth <= 768 ? \"Click UPDATE to update the group's clipboard based on this device and SYNC to copy the updated clipboard onto this device\":\n            <p>Click UPDATE to update the group's clipboard based on this device<br/>Click SYNC to copy the updated clipboard onto this device</p>\n        } else if (deviceGroups.length >= 2) {\n            return \"Drag and Drop devices onto each other to form clipboard sync groups\"\n        } else {\n            return \"Open ClipHop on another device to sync your clipboards\"\n        }\n    }\n\n    // Rendered JSX\n    return (\n        <div className='md:space-y-16'>\n        <Message dispatch={getMessageDispatch()}/>\n        <div className='flex flex-col w-screen place-content-evenly place-items-center md:flex-row'>\n            {window.innerWidth <= 768 ? (\n                <>\n                <Info outerDivClasses='mx-auto order-1 scale-75' name={thisDevice.name} color={colors[thisDevice.id-1]} type={thisDevice.type ? thisDevice.type : 'Mac'}/>\n                <div className='order-3 flex flex-row place-content-evenly ml-5' style={{marginTop:`${window.innerWidth+10}px`}}>\n                    <SyncButton outerDivClasses='mx-auto scale-75' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                    <UpdateButton outerDivClasses='mx-auto scale-75' onClick={updateGroupClipboard}/>\n                </div>\n                </>\n\n            ): (\n                <>\n                    <Info outerDivClasses='order-1 scale-75 md:scale-100' name={thisDevice.name} color={colors[thisDevice.id-1]} type={thisDevice.type ? thisDevice.type : 'Mac'}/>\n                    <div className='order-3 flex flex-row place-content-evenly ml-5 md:flex-col md:ml-0'>\n                        <SyncButton outerDivClasses='md:my-12' color={thisDevice.syncButtonColor} onClick={updateClipboard}/>\n                        <UpdateButton onClick={updateGroupClipboard}/>\n                    </div>\n                </>\n            )}\n    \n            <div className='relative order-2 w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length === 1 && deviceGroups[0].devices.length === 1: true} width={window.innerWidth}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.devices.length > 1}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,SAAS,CAAEC,MAAM,KAAO,OAAO,CAC9C,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,OAAO,KAAM,WAAW,CAC/B,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,OAAQC,UAAU,CAAEC,aAAa,KAAO,eAAe,CACvD,MAAO,CAAAC,OAAO,KAAM,WAAW,CAC/B,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,CAAAC,UAAU,KAAM,cAAc,CAErC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBACA,KAAM,CAAAC,MAAM,CAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC,CAE5F;AACA;AACA,KAAM,CAAAC,cAAc,CAAG,qBAAqB,CAE5C,KAAM,CAAAC,WAAW,CAAGC,MAAM,CAACC,MAAM,CAAC,CAC9BC,UAAU,CAAE,YAAY,CACxBC,UAAU,CAAE,YAAY,CACxBC,UAAU,CAAE,YAAY,CACxBC,YAAY,CAAE,cAAc,CAC5BC,gBAAgB,CAAE,kBAAkB,CACpCC,aAAa,CAAE,eAAe,CAC9BC,IAAI,CAAE,MAAM,CACZC,YAAY,CAAE,cAClB,CAAC,CAAC,CAGF;AACA,QAAS,CAAAC,KAAKA,CAAA,CAAG,CACb;AACA,KAAM,CAACC,UAAU,CAACC,aAAa,CAACC,YAAY,CAACC,SAAS,CAACC,SAAS,CAACC,WAAW,CAACC,YAAY,CAACC,cAAc,CAACC,SAAS,CAAC,CAAG7B,UAAU,CAAC,CAAC,CAClI,KAAM,CAAA8B,UAAU,CAAGxC,MAAM,CAAC,CAACyC,EAAE,CAAC,IAAI,CAACC,SAAS,CAAC,EAAE,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC,CAEtD5C,SAAS,CAAC,IAAM,CACZyC,UAAU,CAACI,OAAO,CAACD,EAAE,CAAGZ,UAAU,CAACY,EAAE,CACzC,CAAC,CAAC,CAACZ,UAAU,CAAC,CAAC,CAEfhC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAA0C,EAAE,CAAG,GAAI,CAAAI,SAAS,CAAC3B,cAAc,CAAC,CACxCsB,UAAU,CAACI,OAAO,CAACH,EAAE,CAAGA,EAAE,CAC1BA,EAAE,CAACK,MAAM,CAAG,IAAM,CAACC,WAAW,CAAC5B,WAAW,CAACG,UAAU,CAAC,CAAC0B,IAAI,CAAC,+BAA+B,CAAC,CAAC,EAAC,CAC9FP,EAAE,CAACQ,SAAS,CAAGC,aAAa,CAC5B;AACA;AACA;AACA;AACA;AACJ,CAAC,CAAC,EAAE,CAAC,CAGL;AACA;AACA,cAAe,CAAAC,eAAeA,CAAA,CAAG,CAC7BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAACb,UAAU,CAACI,OAAO,CAACF,SAAS,CAAC,CAC5D,KAAM,CAAAY,SAAS,CAACZ,SAAS,CAACa,SAAS,CAACf,UAAU,CAACI,OAAO,CAACF,SAAS,CAAC,CACjEV,aAAa,CAAEwB,CAAC,GAAM,CAAC,GAAGA,CAAC,CAACC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAC1D,CAEA;AACD,cAAe,CAAAC,oBAAoBA,CAAA,CAAG,CACjC,GAAI,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAL,SAAS,CAACZ,SAAS,CAACkB,QAAQ,CAAC,CAAC,CACjDR,OAAO,CAACC,GAAG,CAACb,UAAU,CAACI,OAAO,CAACF,SAAS,CAACiB,IAAI,CAAC,CAC9C,GAAInB,UAAU,CAACI,OAAO,CAACF,SAAS,GAAKiB,IAAI,CAAE,CACvCnB,UAAU,CAACI,OAAO,CAACF,SAAS,CAAGiB,IAAI,CACnC,KAAM,CAAAE,OAAO,CAAG,CAACC,OAAO,CAACtB,UAAU,CAACI,OAAO,CAACD,EAAE,CAACD,SAAS,CAACF,UAAU,CAACI,OAAO,CAACF,SAAS,CAAC,CACtF,KAAM,CAAAK,WAAW,CAAC5B,WAAW,CAACO,gBAAgB,CAACmC,OAAO,CAAC,CACvDT,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAACQ,OAAO,CAAC,CACzD,CACJ,CAAE,MAAME,GAAG,CAAE,CACTX,OAAO,CAACY,KAAK,CAAC,0BAA0B,CAAC,CAC7C,CACJ,CAEA;AACA,cAAe,CAAAjB,WAAWA,CAACkB,IAAI,CAACJ,OAAO,CAAE,CACrC,KAAM,CAAAF,IAAI,CAAG,CAACM,IAAI,CAAEJ,OAAO,CAAC,CAC5B,GAAIrB,UAAU,CAACI,OAAO,CAACH,EAAE,EAAID,UAAU,CAACI,OAAO,CAACH,EAAE,CAACyB,UAAU,GAAKrB,SAAS,CAACsB,IAAI,CAAE,CAC9Ef,OAAO,CAACC,GAAG,CAAC,cAAc,CAACM,IAAI,CAAC,CAChCnB,UAAU,CAACI,OAAO,CAACH,EAAE,CAAC2B,IAAI,CAACC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,CAAC,CACpD,CAAC,IAAM,CACHP,OAAO,CAACmB,IAAI,CAAC,6CAA6C,CAAC,CAC/D,CACJ,CAEA;AACA,QAAS,CAAArB,aAAaA,CAACsB,KAAK,CAAE,CAC1B,KAAM,CAACP,IAAI,CAACJ,OAAO,CAAC,CAAGQ,IAAI,CAACI,KAAK,CAACD,KAAK,CAACb,IAAI,CAAC,CAC7CP,OAAO,CAACC,GAAG,CAACY,IAAI,CAACJ,OAAO,CAAC,CACzB,OAAOI,IAAI,EACP,IAAK,CAAA9C,WAAW,CAACK,UAAU,CACvBU,SAAS,CAAC2B,OAAO,CAACa,OAAO,CAAC,CAC1B1C,aAAa,CAAC,CAAC2C,IAAI,CAACd,OAAO,CAACc,IAAI,CAACV,IAAI,CAACJ,OAAO,CAACI,IAAI,CAACtB,EAAE,CAACkB,OAAO,CAAClB,EAAE,CAACc,eAAe,CAAC,OAAO,CAAC,CAAC,CAC1F,MACJ,IAAK,CAAAtC,WAAW,CAACI,UAAU,CACvBY,SAAS,CAAC0B,OAAO,CAACC,OAAO,CAACD,OAAO,CAACc,IAAI,CAACd,OAAO,CAACI,IAAI,CAAC,CACpD,MACJ,IAAK,CAAA9C,WAAW,CAACM,YAAY,CACzB,GAAIe,UAAU,CAACI,OAAO,CAACD,EAAE,GAAKkB,OAAO,CAACe,KAAK,EAAIpC,UAAU,CAACI,OAAO,CAACF,SAAS,GAAKmB,OAAO,CAACgB,YAAY,CAAE,CAClGrC,UAAU,CAACI,OAAO,CAACF,SAAS,CAAGmB,OAAO,CAACgB,YAAY,CACnD7C,aAAa,CAAEwB,CAAC,GAAM,CAAC,GAAGA,CAAC,CAACb,EAAE,CAACkB,OAAO,CAACiB,KAAK,CAACrB,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CACzE,CACArB,WAAW,CAACyB,OAAO,CAACe,KAAK,CAACf,OAAO,CAACiB,KAAK,CAAC,CACxC,MACJ,IAAK,CAAA3D,WAAW,CAACO,gBAAgB,CAC7B,GAAIc,UAAU,CAACG,EAAE,GAAKkB,OAAO,CAACC,OAAO,EAAItB,UAAU,CAACI,OAAO,CAACF,SAAS,GAAKmB,OAAO,CAACgB,YAAY,CAAE,CAC5FrC,UAAU,CAACI,OAAO,CAACF,SAAS,CAAGmB,OAAO,CAACgB,YAAY,CACnD7C,aAAa,CAAEwB,CAAC,GAAM,CAAC,GAAGA,CAAC,CAACC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CACxD,CACA,MACJ,IAAK,CAAAtC,WAAW,CAACU,YAAY,CACzBQ,YAAY,CAACwB,OAAO,CAACc,IAAI,CAAC,CAC1B,MACJ,QACIvB,OAAO,CAACmB,IAAI,4BAAAQ,MAAA,CAA4Bd,IAAI,CAAE,CAAC,CAEvD,CACJ,CAEA;AACA;AACA,QAAS,CAAAe,cAAcA,CAACR,KAAK,CAAE,CAC3BlC,cAAc,CAACkC,KAAK,CAAC,CACzB,CAEA;AACA,QAAS,CAAAS,aAAaA,CAACT,KAAK,CAAE,CAC1B,GAAIA,KAAK,CAACU,IAAI,GAAK,IAAI,EAAIV,KAAK,CAACU,IAAI,CAACvC,EAAE,GAAK6B,KAAK,CAACW,MAAM,CAACxC,EAAE,CAAE,CAC1DP,WAAW,CAACoC,KAAK,CAACW,MAAM,CAACxC,EAAE,CAAC6B,KAAK,CAACU,IAAI,CAACvC,EAAE,CAAC,CAC1C,GAAI,CAAAkB,OAAO,CAAG,CAACe,KAAK,CAACJ,KAAK,CAACW,MAAM,CAACxC,EAAE,CAACmC,KAAK,CAACN,KAAK,CAACU,IAAI,CAACvC,EAAE,CAAC,CACzDI,WAAW,CAAC5B,WAAW,CAACM,YAAY,CAAEoC,OAAO,CAAC,CAClD,CACJ,CAEA;AACA,QAAS,CAAAuB,OAAOA,CAAA,CAAG,CACf/E,aAAa,CAAC,CACVgF,UAAUA,CAACb,KAAK,CAAE,CAACQ,cAAc,CAACR,KAAK,CAAC,EAAC,CACzCc,SAASA,CAACd,KAAK,CAAE,CAACS,aAAa,CAACT,KAAK,CAAC,EAC1C,CAAC,CAAC,CACN,CAEA,KAAM,CAAAe,kBAAkB,CAAGA,CAAA,GAAM,CAC7B,GAAItD,YAAY,CAACuD,MAAM,CAACC,KAAK,EAAIA,KAAK,CAACf,OAAO,CAACgB,MAAM,EAAI,CAAC,CAAC,CAACA,MAAM,EAAI,CAAC,CAAE,CACrE,MAAO,CAAAC,MAAM,CAACC,UAAU,EAAI,GAAG,CAAG,2HAA2H,cAC7J9E,KAAA,MAAA+E,QAAA,EAAG,mEAAiE,cAAAjF,IAAA,QAAI,CAAC,4DAAyD,EAAG,CAAC,CAC1I,CAAC,IAAM,IAAIqB,YAAY,CAACyD,MAAM,EAAI,CAAC,CAAE,CACjC,MAAO,qEAAqE,CAChF,CAAC,IAAM,CACH,MAAO,wDAAwD,CACnE,CACJ,CAAC,CAED;AACA,mBACI5E,KAAA,QAAKgF,SAAS,CAAC,eAAe,CAAAD,QAAA,eAC9BjF,IAAA,CAACV,OAAO,EAAC6F,QAAQ,CAAER,kBAAkB,CAAC,CAAE,CAAC,CAAC,cAC1CzE,KAAA,QAAKgF,SAAS,CAAC,4EAA4E,CAAAD,QAAA,EACtFF,MAAM,CAACC,UAAU,EAAI,GAAG,cACrB9E,KAAA,CAAAE,SAAA,EAAA6E,QAAA,eACAjF,IAAA,CAACH,IAAI,EAACuF,eAAe,CAAC,0BAA0B,CAACrB,IAAI,CAAE5C,UAAU,CAAC4C,IAAK,CAACsB,KAAK,CAAEhF,MAAM,CAACc,UAAU,CAACY,EAAE,CAAC,CAAC,CAAE,CAACsB,IAAI,CAAElC,UAAU,CAACkC,IAAI,CAAGlC,UAAU,CAACkC,IAAI,CAAG,KAAM,CAAC,CAAC,cAC1JnD,KAAA,QAAKgF,SAAS,CAAC,iDAAiD,CAACI,KAAK,CAAE,CAACC,SAAS,IAAApB,MAAA,CAAIY,MAAM,CAACC,UAAU,CAAC,EAAE,MAAI,CAAE,CAAAC,QAAA,eAC5GjF,IAAA,CAACL,UAAU,EAACyF,eAAe,CAAC,kBAAkB,CAACC,KAAK,CAAElE,UAAU,CAAC0B,eAAgB,CAAC2C,OAAO,CAAEjD,eAAgB,CAAC,CAAC,cAC7GvC,IAAA,CAACJ,YAAY,EAACwF,eAAe,CAAC,kBAAkB,CAACI,OAAO,CAAE1C,oBAAqB,CAAC,CAAC,EAChF,CAAC,EACJ,CAAC,cAGH5C,KAAA,CAAAE,SAAA,EAAA6E,QAAA,eACIjF,IAAA,CAACH,IAAI,EAACuF,eAAe,CAAC,+BAA+B,CAACrB,IAAI,CAAE5C,UAAU,CAAC4C,IAAK,CAACsB,KAAK,CAAEhF,MAAM,CAACc,UAAU,CAACY,EAAE,CAAC,CAAC,CAAE,CAACsB,IAAI,CAAElC,UAAU,CAACkC,IAAI,CAAGlC,UAAU,CAACkC,IAAI,CAAG,KAAM,CAAC,CAAC,cAC/JnD,KAAA,QAAKgF,SAAS,CAAC,qEAAqE,CAAAD,QAAA,eAChFjF,IAAA,CAACL,UAAU,EAACyF,eAAe,CAAC,UAAU,CAACC,KAAK,CAAElE,UAAU,CAAC0B,eAAgB,CAAC2C,OAAO,CAAEjD,eAAgB,CAAC,CAAC,cACrGvC,IAAA,CAACJ,YAAY,EAAC4F,OAAO,CAAE1C,oBAAqB,CAAC,CAAC,EAC7C,CAAC,EACR,CACL,cAED5C,KAAA,QAAKgF,SAAS,CAAC,qDAAqD,CAAAD,QAAA,eAChEjF,IAAA,CAACX,KAAK,EAACoG,IAAI,CAAEpE,YAAY,CAAGA,YAAY,CAACyD,MAAM,GAAK,CAAC,EAAIzD,YAAY,CAAC,CAAC,CAAC,CAACyC,OAAO,CAACgB,MAAM,GAAK,CAAC,CAAE,IAAK,CAACY,KAAK,CAAEX,MAAM,CAACC,UAAW,CAAC,CAAC,cAChI9E,KAAA,CAACV,UAAU,EAAAyF,QAAA,eACXjF,IAAA,CAACwE,OAAO,GAAC,CAAC,CACTnD,YAAY,EAAIA,YAAY,CAACsE,GAAG,CAAC,CAACd,KAAK,CAACe,GAAG,GAAK,CAC7C,mBACA5F,IAAA,CAACN,OAAO,EAACmG,MAAM,CAAEhB,KAAK,CAAC9C,EAAG,CAAW+D,GAAG,CAAEnE,SAAS,CAACiE,GAAG,CAAC,CAAC,CAAC,CAAE,CAACG,IAAI,CAAEpE,SAAS,CAACiE,GAAG,CAAC,CAAC,CAAC,CAAE,CAACI,MAAM,CAAEnB,KAAK,CAACf,OAAO,CAACgB,MAAM,CAAG,CAAE,CAAAG,QAAA,cACvHjF,IAAA,CAACT,WAAW,EAACuE,OAAO,CAAEe,KAAK,CAACf,OAAQ,CAACuB,KAAK,CAAER,KAAK,CAACQ,KAAM,CAAC,CAAC,EAD1BO,GAEvB,CAAC,CAEd,CAAC,CAAC,EACU,CAAC,EACZ,CAAC,EACL,CAAC,EACD,CAAC,CAEd,CAEA,cAAe,CAAA1E,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}