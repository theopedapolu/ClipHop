{"ast":null,"code":"var _jsxFileName = \"/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport { DndContext, useDndMonitor } from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport Info from './Info';\nimport useSize from './useSize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = Object.freeze({\n  CONNECTION: 'Connection',\n  ADD_DEVICE: 'Add Device',\n  ADD_GROUPS: 'Add Groups',\n  MERGE_GROUPS: 'Merge Groups',\n  UPDATE_CLIPBOARD: 'Update Clipboard',\n  GET_CLIPBOARD: 'Get Clipboard',\n  CLOSE_DEVICE: 'Close Device'\n});\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500', 'bg-blue-500', 'bg-rose-500', 'bg-amber-500', 'bg-violet-500'];\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups, height, width) {\n  console.log(width);\n  let radius = width >= 768 ? 13.5 : Math.round(13.5 / 35 * width / 16);\n  let positions = [];\n  if (numGroups === 1) {\n    positions.push([radius.toString(), radius.toString()]);\n  } else if (numGroups >= 1) {\n    let theta = 2 * Math.PI / numGroups;\n    for (let i = 0; i < numGroups; ++i) {\n      positions.push([(Math.round(radius * Math.cos(i * theta)) + radius).toString(), (radius - Math.round(radius * Math.sin(i * theta))).toString()]);\n    }\n  }\n  return positions;\n}\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hooks & State\n  const [thisDevice, setThisDevice] = useState({\n    name: \"\",\n    type: \"\"\n  });\n  const windowSize = useSize();\n  const connection = useRef(null);\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');\n    ws.onopen = () => {\n      sendMessage(Message.CONNECTION, {\n        text: \"Device connected successfully\"\n      });\n    };\n    ws.onmessage = handleMessage;\n    ws.onclose = onClose;\n    connection.ws = ws;\n  }, []);\n  const [deviceGroups, setDeviceGroups] = useState([]);\n\n  // State Change Helper methods\n\n  // Adds new device groups based on the provided device list\n  const addGroups = deviceList => {\n    let newDeviceGroups = [];\n    let groupsMap = new Map();\n    let maxId = 0;\n    deviceList.forEach(device => {\n      if (!groupsMap.has(device.groupId)) {\n        groupsMap.set(device.groupId, []);\n      }\n      groupsMap.get(device.groupId).push({\n        name: device.name,\n        type: device.type\n      });\n      maxId = Math.max(maxId, device.groupId);\n    });\n    for (let i = 1; i <= maxId; ++i) {\n      if (groupsMap.has(i)) {\n        let groupDeviceList = groupsMap.get(i);\n        newDeviceGroups.push({\n          id: i,\n          color: colors[i - 1],\n          devices: groupDeviceList,\n          bubble: groupDeviceList.length > 1\n        });\n      }\n    }\n    console.log(newDeviceGroups);\n    setDeviceGroups(newDeviceGroups);\n  };\n\n  // Adds a new device to the device groups\n  const addDevice = (newId, name, type) => {\n    setDeviceGroups(deviceGroups => {\n      let newDeviceGroups = [...deviceGroups, {\n        id: newId,\n        color: colors[newId - 1],\n        devices: [{\n          name: name,\n          type: type\n        }],\n        bubble: false\n      }].sort((a, b) => a.id - b.id);\n      console.log(newDeviceGroups);\n      return newDeviceGroups;\n    });\n  };\n\n  // Merges two device groups into one\n  const mergeGroups = (id1, id2) => {\n    setDeviceGroups(deviceGroups => {\n      let updatedGroups = [];\n      for (let group of deviceGroups) {\n        if (group.id === id2) {\n          const group1 = deviceGroups.find(g => g.id === id1);\n          const mergedDevices = [...group.devices, ...group1.devices];\n          updatedGroups.push({\n            ...group,\n            devices: mergedDevices,\n            bubble: mergedDevices.length > 1\n          });\n        } else if (group.id !== id1) {\n          // Skip group id1 since it will be merged later\n          updatedGroups.push(group);\n        }\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Removes a device by name from the device groups\n  const removeDevice = name => {\n    setDeviceGroups(deviceGroups => {\n      deviceGroups.reduce((acc, group) => {\n        let newDevices = group.devices.filter(device => device.name !== name);\n        if (newDevices.length > 0) {\n          acc.push({\n            ...group,\n            devices: newDevices\n          });\n        }\n        return acc;\n      }, []);\n    });\n  };\n\n  // Websocket handlers\n  async function sendMessage(type, message) {\n    const data = {\n      type,\n      message\n    };\n    if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n      console.log('Sent Message', data);\n      connection.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not open. Cannot send message.');\n    }\n  }\n\n  // Handles incoming WebSocket messages and updates state accordingly\n  function handleMessage(event) {\n    const {\n      type,\n      message\n    } = JSON.parse(event.data);\n    console.log(type, message);\n    switch (type) {\n      case Message.ADD_GROUPS:\n        addGroups(message.devices);\n        setThisDevice({\n          name: message.name,\n          type: message.type\n        });\n        break;\n      case Message.ADD_DEVICE:\n        addDevice(message.groupId, message.name, message.type);\n        break;\n      case Message.MERGE_GROUPS:\n        mergeGroups(message.oldId, message.newId);\n        break;\n      case Message.CLOSE_DEVICE:\n        removeDevice(message.name);\n        break;\n      default:\n        console.warn(`Unhandled message type: ${type}`);\n    }\n  }\n\n  // Handles WebSocket connection closure and removes the device\n  function onClose() {\n    removeDevice(connection.name);\n    let message = {\n      name: connection.name\n    };\n    sendMessage(Message.CLOSE_DEVICE, message);\n  }\n\n  // Drag & Drop event handlers\n  // Handles drag over events during drag-and-drop operations\n  function handleDragOver(event) {\n    if (event.over == null || event.over.id === event.active.id) {\n      setDeviceGroups(deviceGroups.map(group => {\n        return {\n          ...group,\n          color: colors[group.id - 1],\n          bubble: group.devices.length > 1\n        };\n      }));\n    } else {\n      setDeviceGroups(deviceGroups.map(group => {\n        if (group.id === event.active.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: group.devices.length > 1\n          };\n        } else if (group.id === event.over.id) {\n          return {\n            ...group,\n            color: colors[event.over.id - 1],\n            bubble: true\n          };\n        } else {\n          return {\n            ...group,\n            color: colors[group.id - 1],\n            bubble: group.devices.length > 1\n          };\n        }\n      }));\n    }\n  }\n\n  // Handles the end of a drag event and merges groups if necessary\n  function handleDragEnd(event) {\n    if (event.over !== null && event.over.id !== event.active.id) {\n      mergeGroups(event.active.id, event.over.id);\n      let message = {\n        oldId: event.active.id,\n        newId: event.over.id\n      };\n      sendMessage(Message.MERGE_GROUPS, message);\n    }\n  }\n\n  // Monitors drag-and-drop events\n  function Monitor() {\n    _s();\n    useDndMonitor({\n      onDragOver(event) {\n        handleDragOver(event);\n      },\n      onDragEnd(event) {\n        handleDragEnd(event);\n      }\n    });\n  }\n\n  // Generates positions for the device groups based on their count\n  _s(Monitor, \"qZ3EevWvVO3mH5/aackxowyCAsg=\", false, function () {\n    return [useDndMonitor];\n  });\n  const positions = useMemo(() => {\n    return deviceGroups ? generatePositions(deviceGroups.length, windowSize[0], windowSize[1]) : [];\n  }, [deviceGroups, windowSize]);\n\n  // const positions = [[0,0]]\n  // Rendered JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col place-content-center place-items-center bg-sky-400 md:flex-row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-amber-400 relative w-screen md:w-[35rem] md:h-[35rem]\",\n      children: [/*#__PURE__*/_jsxDEV(Clock, {\n        spin: deviceGroups ? deviceGroups.length <= 1 : true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        children: [/*#__PURE__*/_jsxDEV(Monitor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }, this), deviceGroups && deviceGroups.map((group, idx) => {\n          return /*#__PURE__*/_jsxDEV(DndIcon, {\n            iconId: group.id,\n            top: positions[idx][0],\n            left: positions[idx][1],\n            bubble: group.bubble,\n            children: /*#__PURE__*/_jsxDEV(DeviceGroup, {\n              devices: group.devices,\n              color: group.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 21\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 21\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 9\n  }, this);\n}\n_s2(Crown, \"lSTwV5wz6Vj0Ba7p5NBvS2oWhaw=\", false, function () {\n  return [useSize];\n});\n_c = Crown;\nexport default Crown;\nvar _c;\n$RefreshReg$(_c, \"Crown\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","Clock","DeviceGroup","DndContext","useDndMonitor","DndIcon","SyncButton","Info","useSize","jsxDEV","_jsxDEV","Message","Object","freeze","CONNECTION","ADD_DEVICE","ADD_GROUPS","MERGE_GROUPS","UPDATE_CLIPBOARD","GET_CLIPBOARD","CLOSE_DEVICE","colors","generatePositions","numGroups","height","width","console","log","radius","Math","round","positions","push","toString","theta","PI","i","cos","sin","Crown","_s2","_s","$RefreshSig$","thisDevice","setThisDevice","name","type","windowSize","connection","ws","WebSocket","onopen","sendMessage","text","onmessage","handleMessage","onclose","onClose","deviceGroups","setDeviceGroups","addGroups","deviceList","newDeviceGroups","groupsMap","Map","maxId","forEach","device","has","groupId","set","get","max","groupDeviceList","id","color","devices","bubble","length","addDevice","newId","sort","a","b","mergeGroups","id1","id2","updatedGroups","group","group1","find","g","mergedDevices","removeDevice","reduce","acc","newDevices","filter","message","data","readyState","OPEN","send","JSON","stringify","warn","event","parse","oldId","handleDragOver","over","active","map","handleDragEnd","Monitor","onDragOver","onDragEnd","className","children","spin","fileName","_jsxFileName","lineNumber","columnNumber","idx","iconId","top","left","_c","$RefreshReg$"],"sources":["/Users/theopedapolu/ClipHop/frontend/src/components/Crown.js"],"sourcesContent":["import React, {useEffect, useState, useRef, useMemo} from 'react';\nimport Clock from './Clock';\nimport DeviceGroup from './DeviceGroup';\nimport {DndContext, useDndMonitor} from '@dnd-kit/core';\nimport DndIcon from './DnDIcon';\nimport SyncButton from './SyncButton';\nimport Info from './Info';\nimport useSize from './useSize';\n\nconst Message = Object.freeze({\n    CONNECTION: 'Connection',\n    ADD_DEVICE: 'Add Device',\n    ADD_GROUPS: 'Add Groups',\n    MERGE_GROUPS: 'Merge Groups',\n    UPDATE_CLIPBOARD: 'Update Clipboard',\n    GET_CLIPBOARD: 'Get Clipboard',\n    CLOSE_DEVICE: 'Close Device'\n})\n\n// List of colors used for groups\nconst colors = ['bg-emerald-500','bg-blue-500','bg-rose-500','bg-amber-500','bg-violet-500'];\n\n\n// Generates positions for device groups based on the number of groups\nfunction generatePositions(numGroups,height,width) {\n    console.log(width)\n    let radius = width >= 768 ? 13.5 : Math.round((13.5/35)*width/16);\n    let positions = [];\n    if (numGroups === 1) {\n        positions.push([radius.toString(),radius.toString()]);\n    } else if (numGroups >= 1) {\n        let theta = 2*Math.PI/numGroups;\n\n        for (let i = 0; i < numGroups; ++i) {\n            positions.push([(Math.round(radius*Math.cos(i*theta)) + radius).toString(),\n                (radius-Math.round(radius*Math.sin(i*theta))).toString()]);\n        }\n    }\n    return positions;\n}\n\n\n\n// Main component for managing device groups and WebSocket connection\nfunction Crown() {\n    // Hooks & State\n    const [thisDevice,setThisDevice] = useState({\n        name:\"\",\n        type:\"\"\n    });\n\n    const windowSize = useSize();\n\n    const connection = useRef(null);\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:8080');\n        ws.onopen = () => {sendMessage(Message.CONNECTION,{text:\"Device connected successfully\"})};\n        ws.onmessage = handleMessage;\n        ws.onclose = onClose;\n        connection.ws = ws\n        \n    },[])\n\n    const [deviceGroups, setDeviceGroups] = useState([]);\n\n    // State Change Helper methods\n    \n    // Adds new device groups based on the provided device list\n    const addGroups = (deviceList) => {\n        let newDeviceGroups = [];\n        let groupsMap = new Map();\n        let maxId = 0\n        deviceList.forEach(device => {\n            if (!groupsMap.has(device.groupId)) {\n                groupsMap.set(device.groupId, []);\n            }\n            groupsMap.get(device.groupId).push({ name: device.name, type: device.type });\n            maxId = Math.max(maxId, device.groupId);\n        });\n\n        for (let i=1; i <= maxId; ++i) {\n            if (groupsMap.has(i)) {\n                let groupDeviceList = groupsMap.get(i)\n                newDeviceGroups.push({id:i, color:colors[i-1], devices:groupDeviceList, bubble:groupDeviceList.length > 1})\n            }\n        }\n        console.log(newDeviceGroups)\n        setDeviceGroups(newDeviceGroups);\n    }\n\n    // Adds a new device to the device groups\n    const addDevice = (newId, name,type) => {\n        setDeviceGroups(deviceGroups => {\n            let newDeviceGroups = [...deviceGroups, {id:newId, color:colors[newId-1], devices:[{name:name,type:type}], bubble:false}].sort((a,b) => (a.id-b.id))\n            console.log(newDeviceGroups)\n            return newDeviceGroups\n        });\n    };\n\n    // Merges two device groups into one\n    const mergeGroups = (id1,id2) => {\n        setDeviceGroups(deviceGroups => {\n            let updatedGroups = [];\n            for (let group of deviceGroups) {\n                if (group.id === id2) {\n                    const group1 = deviceGroups.find(g => g.id === id1);\n                    const mergedDevices = [...group.devices, ...group1.devices];\n                    updatedGroups.push({...group, devices: mergedDevices, bubble:mergedDevices.length > 1});\n                } else if (group.id !== id1) { // Skip group id1 since it will be merged later\n                    updatedGroups.push(group);\n                }\n            }\n            return updatedGroups\n        });\n    }\n\n    // Removes a device by name from the device groups\n    const removeDevice = (name) => {\n        setDeviceGroups(deviceGroups => {\n            deviceGroups.reduce((acc,group) => {\n                let newDevices = group.devices.filter(device => device.name !== name);\n                if (newDevices.length > 0) {\n                    acc.push({...group,devices:newDevices})\n                }\n                return acc;\n            },[]);\n        });\n    };\n\n    // Websocket handlers\n    async function sendMessage(type,message) {\n        const data = {type, message}\n        if (connection.ws && connection.ws.readyState === WebSocket.OPEN) {\n            console.log('Sent Message',data)\n            connection.ws.send(JSON.stringify(data));\n        } else {\n            console.warn('WebSocket is not open. Cannot send message.');\n        }\n    }\n    \n    // Handles incoming WebSocket messages and updates state accordingly\n    function handleMessage(event) {\n        const {type,message} = JSON.parse(event.data);\n        console.log(type,message)\n        switch(type) {\n            case Message.ADD_GROUPS:\n                addGroups(message.devices);\n                setThisDevice({name:message.name,type:message.type})\n                break;\n            case Message.ADD_DEVICE:\n                addDevice(message.groupId,message.name,message.type)\n                break;\n            case Message.MERGE_GROUPS:\n                mergeGroups(message.oldId,message.newId);\n                break;\n            case Message.CLOSE_DEVICE:\n                removeDevice(message.name);\n                break;   \n            default:\n                console.warn(`Unhandled message type: ${type}`);\n            \n        }\n    }\n    \n    // Handles WebSocket connection closure and removes the device\n    function onClose() {\n        removeDevice(connection.name);\n        let message = {name:connection.name};\n        sendMessage(Message.CLOSE_DEVICE, message);\n    }\n\n\n    // Drag & Drop event handlers\n    // Handles drag over events during drag-and-drop operations\n    function handleDragOver(event) {\n        if (event.over == null || event.over.id === event.active.id) {\n            setDeviceGroups(deviceGroups.map((group) => {return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}}))\n        } else {\n            setDeviceGroups(deviceGroups.map((group) => {\n                if (group.id === event.active.id) {\n                    return {...group,color:colors[event.over.id-1],bubble:group.devices.length > 1}\n                } else if (group.id === event.over.id) { \n                    return {...group,color:colors[event.over.id-1],bubble:true}\n                } else {\n                    return {...group,color:colors[group.id-1],bubble:group.devices.length > 1}\n                }\n            }))\n        }\n    }\n\n    // Handles the end of a drag event and merges groups if necessary\n    function handleDragEnd(event) {\n        if (event.over !== null && event.over.id !== event.active.id) {\n            mergeGroups(event.active.id,event.over.id);\n            let message = {oldId:event.active.id,newId:event.over.id};\n            sendMessage(Message.MERGE_GROUPS, message);\n        }\n    }\n\n    // Monitors drag-and-drop events\n    function Monitor() {\n        useDndMonitor({\n            onDragOver(event) {handleDragOver(event)},\n            onDragEnd(event) {handleDragEnd(event)}\n        })\n    }\n    \n    // Generates positions for the device groups based on their count\n    const positions = useMemo(() => {\n        return deviceGroups ? generatePositions(deviceGroups.length,windowSize[0],windowSize[1]) : []\n    }, [deviceGroups,windowSize])\n\n    // const positions = [[0,0]]\n    // Rendered JSX\n    return (\n        <div className='flex flex-col place-content-center place-items-center bg-sky-400 md:flex-row'>\n            {/* <Info outerDivClasses='mx-24 mb-5' name={thisDevice.name} color={deviceGroups.find(group => group.devices.some(device => device.name === thisDevice.name))?.color} type='E'/> */}\n            <div className='bg-amber-400 relative w-screen md:w-[35rem] md:h-[35rem]'>\n                <Clock spin={deviceGroups ? deviceGroups.length <= 1 : true}/>\n                <DndContext>\n                <Monitor/>\n                {deviceGroups && deviceGroups.map((group,idx) => {\n                    return (\n                    <DndIcon iconId={group.id} key={idx} top={positions[idx][0]} left={positions[idx][1]} bubble={group.bubble}>\n                    <DeviceGroup devices={group.devices} color={group.color}/>\n                    </DndIcon>\n                    )\n                })}\n                </DndContext>   \n            </div>\n            {/* <SyncButton outerDivClasses='mx-24' color='green'/> */}\n        </div>\n    )\n}\n\nexport default Crown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}